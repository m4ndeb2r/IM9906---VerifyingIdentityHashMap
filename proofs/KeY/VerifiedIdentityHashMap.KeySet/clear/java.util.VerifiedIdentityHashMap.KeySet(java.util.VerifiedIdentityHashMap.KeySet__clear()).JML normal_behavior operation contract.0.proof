\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 18 18:52:28 CET 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=5000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Thu Mar 18 18:52:28 CET 2021
contract=java.util.VerifiedIdentityHashMap.KeySet[java.util.VerifiedIdentityHashMap.KeySet\\:\\:clear()].JML normal_behavior operation contract.0
name=java.util.VerifiedIdentityHashMap.KeySet[java.util.VerifiedIdentityHashMap.KeySet\\:\\:clear()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "a6034b00a3"))

(autoModeTime "1005")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,0,0,1,0,0,0,0,1,1") (newnames "self,exc,heapAtPre,o,f"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,0,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,0,0,1,0,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,1,0,0,0,0,1"))
(rule "elementOfUnion" (formula "7") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "7") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "7") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "7") (term "0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "7") (term "1,0,0,0,0,0,1,0,1"))
(rule "nnf_imp2or" (formula "7") (term "0,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,1,0,0,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,1,0,0,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "1,1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,1,1,0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,1,1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,1,0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,1,0,0,1,0,0,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_clear,savedHeapBefore_clear"))
(rule "simplifyUpdate2" (formula "7") (term "1"))
 (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_clear_0,exc_0,heapAfter_clear,anon_heap_clear") (contract "java.util.VerifiedIdentityHashMap.KeySet[java.util.Collection::clear()].JML behavior operation contract.0#java.util.VerifiedIdentityHashMap.KeySet[java.util.Set::clear()].JML behavior operation contract.0#java.util.VerifiedIdentityHashMap.KeySet[java.util.VerifiedIdentityHashMap.KeySet::clear()].JML normal_behavior operation contract.0"))
(branch "Post (clear)"
   (rule "instanceof_static_type" (formula "7") (term "0,0,0,1,1,1,1,0,1,1,1,1,1"))
   (rule "instanceof_static_type" (formula "7") (term "0,0,0,1,1,1,0,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "7") (term "0,0,1,1,1,1,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "7") (term "0,0,1,1,1,0,0,1,1,1,1,1"))
   (rule "intersectWithItself" (formula "7") (term "0,1,0,0,1,1"))
   (rule "eq_and" (formula "7") (term "0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "7") (term "0,1,1,1,0,1,1,1,1,1"))
   (rule "expand_inInt" (formula "7") (term "1,0,0,1,0,0,1,1,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "replace_int_MIN" (formula "7") (term "0,1,1,0,0,1,0,0,1,1,1,1,1,1"))
   (rule "replace_int_MAX" (formula "7") (term "1,0,1,0,0,1,0,0,1,1,1,1,1,1"))
   (rule "andLeft" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "replace_known_left" (formula "7") (term "0,1,1,0") (ifseqformula "5"))
   (rule "ifthenelse_true" (formula "7") (term "1,1,0"))
   (rule "replace_known_left" (formula "7") (term "0,0,1,0") (ifseqformula "5"))
   (rule "ifthenelse_true" (formula "7") (term "0,1,0"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "andLeft" (formula "8"))
   (rule "typeEqDerived" (formula "9") (term "0,1,1,1,1,1,0,1") (ifseqformula "8"))
   (rule "typeEqDerived" (formula "9") (term "0,0,1,1,1,1,0,1") (ifseqformula "8"))
   (rule "boolean_equal" (formula "9") (term "1,1,1,1,1,0,1"))
   (rule "boolean_equal" (formula "9") (term "0,1,1,1,1,0,1"))
   (rule "concrete_or_3" (formula "9") (term "1,1,1,1,0,1"))
   (rule "concrete_and_3" (formula "9") (term "1,1,1,0,1"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "simplifyUpdate2" (formula "9") (term "0"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "0"))
   (rule "applyOnRigidFormula" (formula "9") (term "1"))
   (rule "applyOnRigidFormula" (formula "9") (term "0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0"))
   (rule "applyOnPV" (formula "9") (term "0,0"))
   (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "5"))
   (rule "concrete_impl_1" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "applyOnRigidFormula" (formula "11") (term "1"))
   (rule "simplifyUpdate2" (formula "11") (term "1,1"))
   (rule "replace_known_left" (formula "11") (term "1,1") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "11") (term "1"))
   (rule "applyOnRigidFormula" (formula "11") (term "0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0"))
   (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "5"))
   (rule "concrete_impl_1" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "0"))
   (rule "replace_known_left" (formula "10") (term "1,1") (ifseqformula "14"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "concrete_impl_4" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "0"))
   (rule "replace_known_left" (formula "9") (term "1,1") (ifseqformula "13"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "concrete_impl_4" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyOnRigidFormula" (formula "12"))
   (rule "simplifyUpdate1" (formula "12") (term "1"))
   (rule "applyOnPV" (formula "12") (term "0"))
   (rule "applyOnRigidFormula" (formula "11"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate1" (formula "10") (term "1"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate1" (formula "9") (term "1"))
   (rule "simplifyUpdate1" (formula "9") (term "0"))
   (rule "applyOnRigidFormula" (formula "13"))
   (rule "simplifyUpdate1" (formula "13") (term "1"))
   (rule "simplifyUpdate1" (formula "13") (term "0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0"))
   (rule "applyOnPV" (formula "10") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "1"))
   (rule "applyOnRigidTerm" (formula "9") (term "0"))
   (rule "applyOnRigidTerm" (formula "13") (term "1"))
   (rule "simplifyUpdate1" (formula "13") (term "2,1"))
   (rule "applyOnPV" (formula "13") (term "0,1"))
   (rule "applyOnRigidTerm" (formula "13") (term "0"))
   (rule "applyOnPV" (formula "13") (term "0,0"))
   (rule "simplifyUpdate1" (formula "13") (term "2,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
   (rule "simplifyUpdate2" (formula "11") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,1"))
   (rule "simplifyUpdate1" (formula "9") (term "2,0,1"))
   (rule "applyOnPV" (formula "9") (term "0,0,1"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "2,0,0"))
   (rule "applyOnPV" (formula "9") (term "0,0,0"))
   (rule "applyOnRigidTerm" (formula "13") (term "1,1"))
   (rule "applyOnPV" (formula "13") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "13") (term "1,1,1"))
   (rule "simplifyUpdate1" (formula "13") (term "2,1,1"))
   (rule "applyOnRigidTerm" (formula "13") (term "1,0"))
   (rule "simplifyUpdate1" (formula "13") (term "2,1,0"))
   (rule "simplifyUpdate1" (formula "13") (term "1,1,0"))
   (rule "applyOnPV" (formula "13") (term "0,1,0"))
   (rule "eqSymm" (formula "13"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "11") (term "0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "1,0,1"))
   (rule "applyOnPV" (formula "9") (term "0,1,0,1"))
   (rule "simplifyUpdate1" (formula "9") (term "1,1,0,1"))
   (rule "simplifyUpdate1" (formula "9") (term "2,1,0,1"))
   (rule "applyOnRigidTerm" (formula "9") (term "1,0,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,1,0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "2,1,0,0"))
   (rule "eqSymm" (formula "9"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,1,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "1,0,0,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,1,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,1,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,1,0,1,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
   (rule "apply_eq_monomials" (formula "11") (term "1,0,0,1,0,0,0") (ifseqformula "9"))
   (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "add_literals" (formula "11") (term "1,1,1,0,0,1,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
   (rule "distributeIntersection" (formula "7") (term "1,0"))
   (rule "distributeIntersection" (formula "7") (term "0,1,0"))
   (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=java_util_VerifiedIdentityHashMap_size_0"))
   (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "7"))
   (rule "elementOfFreshLocs" (formula "10") (term "1,0,0"))
   (rule "equalUnique" (formula "10") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "10") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "10") (term "0,0,0"))
   (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "11"))
   (rule "ifEqualsInteger" (formula "10"))
   (rule "elementOfUnion" (formula "10") (term "0,0,0,1"))
   (rule "elementOfUnion" (formula "10") (term "0,0,0"))
   (rule "elementOfUnion" (formula "10") (term "0,0,0,0,1"))
   (rule "elementOfIntersect" (formula "10") (term "1,0,0,0,1"))
   (rule "elementOfSingleton" (formula "10") (term "1,1,0,0,0,1"))
   (rule "equalUnique" (formula "10") (term "1,1,1,0,0,0,1"))
   (rule "concrete_and_4" (formula "10") (term "1,1,0,0,0,1"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0,0,1"))
   (rule "concrete_or_4" (formula "10") (term "0,0,0,1"))
   (rule "elementOfIntersect" (formula "10") (term "1,0,0,0"))
   (rule "elementOfSingleton" (formula "10") (term "1,1,0,0,0"))
   (rule "equalUnique" (formula "10") (term "1,1,1,0,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,1,0,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0,0"))
   (rule "concrete_or_4" (formula "10") (term "0,0,0"))
   (rule "elementOfIntersect" (formula "10") (term "1,0,0,0,1"))
   (rule "elementOfSingleton" (formula "10") (term "1,1,0,0,0,1"))
   (rule "eqClose" (formula "10") (term "1,1,1,0,0,0,1"))
   (rule "concrete_and_3" (formula "10") (term "1,1,0,0,0,1"))
   (rule "elementOfIntersect" (formula "10") (term "0,0,0,0,1"))
   (rule "elementOfSingleton" (formula "10") (term "1,0,0,0,0,1"))
   (rule "equalUnique" (formula "10") (term "1,1,0,0,0,0,1"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0,0,0,1"))
   (rule "concrete_and_4" (formula "10") (term "0,0,0,0,1"))
   (rule "concrete_or_2" (formula "10") (term "0,0,0,1"))
   (rule "elementOfUnion" (formula "10") (term "0,0,0"))
   (rule "elementOfSetMinus" (formula "10") (term "0,0,0,0,1"))
   (rule "elementOfAllLocs" (formula "10") (term "0,0,0,0,0,1"))
   (rule "concrete_and_1" (formula "10") (term "0,0,0,0,1"))
   (rule "elementOfFreshLocs" (formula "10") (term "0,0,0,0,0,1"))
   (rule "elementOfIntersect" (formula "10") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "10") (term "1,0,0,0,0"))
   (rule "equalUnique" (formula "10") (term "1,1,0,0,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0,0,0"))
   (rule "concrete_and_4" (formula "10") (term "0,0,0,0"))
   (rule "concrete_or_2" (formula "10") (term "0,0,0"))
   (rule "elementOfIntersect" (formula "10") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "10") (term "1,0,0,0"))
   (rule "eqClose" (formula "10") (term "1,1,0,0,0"))
   (rule "concrete_and_3" (formula "10") (term "1,0,0,0"))
   (rule "elementOfSetMinus" (formula "10") (term "0,0,0,0"))
   (rule "elementOfAllLocs" (formula "10") (term "0,0,0,0,0"))
   (rule "concrete_and_1" (formula "10") (term "0,0,0,0"))
   (rule "elementOfFreshLocs" (formula "10") (term "0,0,0,0,0"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=java_util_VerifiedIdentityHashMap_modCount_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
   (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "15"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0"))
   (rule "elementOfIntersect" (formula "1") (term "1,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0"))
   (rule "equalUnique" (formula "1") (term "1,1,1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "1,1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
   (rule "concrete_or_4" (formula "1") (term "0,0,0"))
   (rule "pullOutSelect" (formula "10") (term "1,0,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_KeySet_enclosingThis__0"))
   (rule "applyEq" (formula "12") (term "1,0,1,0") (ifseqformula "10"))
   (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "0,0,0,0,0,0,0,0,1") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "1,0,0,1,0,0,0,0,0,1") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "1,0,0,1,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "0,0,0,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "1") (term "0,0,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "14") (term "1,1,0,1,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "1,0,1,1") (ifseqformula "10"))
   (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "1,0,0,1,0,0,0,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "0,0,0,1,0,0,1") (ifseqformula "10"))
   (rule "applyEq" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "0,1,0,0,0,1") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "0,0,0,0,0,0,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "1,0,0,1,1,0,0,1") (ifseqformula "10"))
   (rule "applyEq" (formula "12") (term "0,1,0,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "10"))
   (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "8"))
   (rule "elementOfFreshLocs" (formula "10") (term "1,0,0"))
   (rule "equalUnique" (formula "10") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "10") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "10") (term "0,0,0"))
   (rule "eqSymm" (formula "12") (term "1,0,0,0,1"))
   (rule "eqSymm" (formula "12") (term "1,0,0,0"))
   (rule "replace_known_left" (formula "10") (term "0,1,1,0,0") (ifseqformula "3"))
   (rule "concrete_not_1" (formula "10") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0"))
   (rule "concrete_or_4" (formula "10") (term "0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0"))
   (rule "elementOfUnion" (formula "10") (term "0,0"))
   (rule "elementOfIntersect" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
   (rule "eqClose" (formula "1") (term "1,1,0,0,0,0"))
   (rule "concrete_and_3" (formula "1") (term "1,0,0,0,0"))
   (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
   (rule "elementOfIntersect" (formula "1") (term "1,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0"))
   (rule "equalUnique" (formula "1") (term "1,1,1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "1,1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
   (rule "concrete_or_4" (formula "1") (term "0,0,0"))
   (rule "elementOfIntersect" (formula "10") (term "1,0,0"))
   (rule "elementOfSingleton" (formula "10") (term "1,1,0,0"))
   (rule "equalUnique" (formula "10") (term "1,1,1,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0"))
   (rule "concrete_or_4" (formula "10") (term "0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
   (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,0"))
   (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
   (rule "elementOfFreshLocs" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfUnion" (formula "10") (term "0,0"))
   (rule "elementOfIntersect" (formula "10") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "10") (term "1,0,0,0"))
   (rule "equalUnique" (formula "10") (term "1,1,0,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "10") (term "0,0,0"))
   (rule "concrete_or_2" (formula "10") (term "0,0"))
   (rule "elementOfIntersect" (formula "10") (term "0,0"))
   (rule "elementOfSingleton" (formula "10") (term "1,0,0"))
   (rule "equalUnique" (formula "10") (term "1,1,0,0"))
   (rule "concrete_and_4" (formula "10") (term "1,0,0"))
   (rule "concrete_and_4" (formula "10") (term "0,0"))
   (rule "ifthenelse_false" (formula "10") (term "0"))
   (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "12") (term "1,0,0,1,1,0,0,1") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0,0,0,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "12") (term "1,1,0,0,0") (ifseqformula "10"))
   (rule "eqClose" (formula "12") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0"))
   (rule "neq_or_2" (formula "12") (term "0,0"))
   (rule "concrete_and_1" (formula "12") (term "0"))
   (rule "applyEqReverse" (formula "12") (term "0,0,0,1,0,0,1") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "12") (term "0,0,0,0,0,0,0,0,1") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "14") (term "1,1,0,1,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "1") (term "1,1,0,0,0") (ifseqformula "10"))
   (rule "eqClose" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0,0"))
   (rule "applyEqReverse" (formula "12") (term "1,0,1,1") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "12") (term "1,0,0,1,0,0,0,0,0,1") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "11") (term "1,0,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "12") (term "1,1,0,0,0,1") (ifseqformula "10"))
   (rule "eqClose" (formula "12") (term "1,0,0,0,1"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0,1"))
   (rule "neq_or_2" (formula "12") (term "0,0,1"))
   (rule "concrete_not_1" (formula "12") (term "0,1"))
   (rule "concrete_and_2" (formula "12") (term "1"))
   (rule "concrete_or_4" (formula "12"))
   (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0,0,0") (ifseqformula "10"))
   (rule "neq_or_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_true" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "12") (term "1,0") (ifseqformula "10"))
   (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "10"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "eqSymm" (formula "14"))
   (rule "pullOutSelect" (formula "12") (term "1,0,1,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_0"))
   (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "12"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "7"))
   (rule "elementOfFreshLocs" (formula "12") (term "1,0,0"))
   (rule "equalUnique" (formula "12") (term "0,1,0,0,0"))
   (rule "concrete_not_2" (formula "12") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "12") (term "0,0,0"))
   (rule "eqSymm" (formula "9"))
   (rule "applyEq" (formula "13") (term "1,1,1,0,0,0") (ifseqformula "9"))
   (rule "elementOfUnion" (formula "12") (term "0,0,0"))
   (rule "elementOfUnion" (formula "12") (term "0,0,0,0"))
   (rule "elementOfIntersect" (formula "12") (term "1,0,0,0"))
   (rule "elementOfSingleton" (formula "12") (term "1,1,0,0,0"))
   (rule "equalUnique" (formula "12") (term "1,1,1,0,0,0"))
   (rule "concrete_and_3" (formula "12") (term "1,1,0,0,0"))
   (rule "eqClose" (formula "12") (term "1,1,0,0,0"))
   (rule "concrete_and_3" (formula "12") (term "1,0,0,0"))
   (rule "elementOfIntersect" (formula "12") (term "1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "12") (term "1,1,0,0,0,0"))
   (rule "eqClose" (formula "12") (term "0,1,1,0,0,0,0"))
   (rule "concrete_and_1" (formula "12") (term "1,1,0,0,0,0"))
   (rule "equalUnique" (formula "12") (term "1,1,0,0,0,0"))
   (rule "concrete_and_4" (formula "12") (term "1,0,0,0,0"))
   (rule "concrete_or_4" (formula "12") (term "0,0,0,0"))
   (rule "elementOfSetMinus" (formula "12") (term "1,0,0,0"))
   (rule "elementOfAllLocs" (formula "12") (term "0,1,0,0,0"))
   (rule "concrete_and_1" (formula "12") (term "1,0,0,0"))
   (rule "elementOfFreshLocs" (formula "12") (term "0,1,0,0,0"))
   (rule "neq_or_4" (formula "12") (term "0,0"))
   (rule "ifthenelse_true" (formula "12") (term "0"))
   (rule "applyEqReverse" (formula "9") (term "0,1") (ifseqformula "12"))
   (rule "applyEqReverse" (formula "13") (term "1,0,1,0") (ifseqformula "12"))
   (rule "applyEqReverse" (formula "13") (term "0,1,1,1,0,0,0") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "eqSymm" (formula "9"))
   (rule "applyEq" (formula "12") (term "1,1,1,0,0,0") (ifseqformula "9"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "1,0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "commute_or_2" (formula "12") (term "0,0"))
   (rule "shift_paren_or" (formula "12") (term "0,0,0"))
   (rule "commute_or_2" (formula "12") (term "0"))
   (rule "commute_or_2" (formula "12") (term "0,0"))
   (rule "commute_or_2" (formula "12") (term "0,0,0"))
   (rule "commute_or_2" (formula "12") (term "0,0"))
   (rule "commute_or" (formula "12") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_or_subsumption1" (formula "12") (term "0,0,0"))
   (rule "qeq_literals" (formula "12") (term "0,1,0,0,0,0"))
   (rule "concrete_and_2" (formula "12") (term "1,0,0,0,0"))
   (rule "concrete_or_4" (formula "12") (term "0,0,0,0"))
   (rule "tryEmpty" (formula "16") (term "1"))
   (rule "emptyModality" (formula "16") (term "1"))
   (rule "applyOnRigidFormula" (formula "16"))
   (rule "simplifyUpdate2" (formula "16") (term "1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0"))
   (rule "simplifyUpdate2" (formula "16") (term "1,0"))
   (rule "simplifyUpdate2" (formula "16") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0"))
   (rule "eqClose" (formula "16") (term "1,0"))
   (rule "concrete_and_3" (formula "16") (term "0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0"))
   (rule "simplifyUpdate2" (formula "16") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
   (rule "simplifyUpdate2" (formula "16") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
   (rule "simplifyUpdate2" (formula "16") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0"))
   (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "13"))
   (rule "concrete_and_3" (formula "16") (term "0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
   (rule "simplifyUpdate2" (formula "16") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,1,0,0,1"))
   (rule "applyOnPV" (formula "16") (term "0,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0,0,1"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0,1"))
   (rule "applyOnPV" (formula "16") (term "0,0,1,0,0,1"))
   (rule "eqSymm" (formula "16") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "16") (term "0,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "16") (term "1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
   (rule "simplifyUpdate2" (formula "16") (term "1,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "16") (term "1,0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "16") (term "1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "16") (term "0,1,0,0"))
   (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "11"))
   (rule "concrete_and_3" (formula "16") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,1,0"))
   (rule "simplifyUpdate2" (formula "16") (term "0,0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "0,0,0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1,0,0,0,1"))
   (rule "applyOnPV" (formula "16") (term "0,0,0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,0,1,1,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,1,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,1,1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,0,0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,0,1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "0,1,0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,1,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "1,0,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "1,0,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_5" (formula "16") (term "0,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "16") (term "0,1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0,0"))
   (rule "eqSymm" (formula "16") (term "0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,1,0,0"))
   (rule "eqSymm" (formula "16") (term "1,0,0"))
   (rule "replace_known_left" (formula "16") (term "1,0,0") (ifseqformula "9"))
   (rule "concrete_and_3" (formula "16") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0,1,0,1,0"))
   (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "1,1,0,1,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "1,1,0,1,0,1,0"))
   (rule "replaceKnownSelect_taclet0_5" (formula "16") (term "1,0,1,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "16") (term "1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,1,0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,0,0,0"))
   (rule "replaceKnownSelect_taclet0_1" (formula "16") (term "0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "16") (term "0,0,0,0"))
   (rule "replace_known_right" (formula "16") (term "0,0,0") (ifseqformula "14"))
   (rule "concrete_not_2" (formula "16") (term "0,0"))
   (rule "concrete_and_1" (formula "16") (term "0"))
   (rule "applyOnRigidTerm" (formula "16") (term "0,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,0,1,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "16") (term "1,0,1,1,0,0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,1,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "2,1,0,1,1,0,0,0,0"))
   (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "1,0,1,1,0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "1,0,1,1,0,0,0,0"))
   (rule "replaceKnownSelect_taclet0_5" (formula "16") (term "0,1,1,0,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "16") (term "0,1,1,0,0,0,0"))
   (rule "applyEq" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "9"))
   (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap_KeySet" (formula "5") (ifseqformula "3"))
   (rule "true_left" (formula "5"))
   (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap_KeySet" (formula "12") (ifseqformula "3"))
   (rule "true_left" (formula "12"))
   (rule "andRight" (formula "14"))
   (branch
      (rule "allRight" (formula "14") (inst "sk=i_0"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "15"))
      (rule "orRight" (formula "14"))
      (rule "inEqSimp_geqRight" (formula "16"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_leqRight" (formula "17"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_leqRight" (formula "16"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_geqRight" (formula "17"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "mul_literals" (formula "4") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "2"))
      (rule "leq_literals" (formula "3") (term "0"))
      (rule "concrete_or_1" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
      (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfIntersect" (formula "1") (term "1,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0"))
      (rule "equalUnique" (formula "1") (term "1,1,1,0,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,1,0,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0,0"))
      (rule "elementOfIntersect" (formula "1") (term "1,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0"))
      (rule "equalUnique" (formula "1") (term "1,1,1,0,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,1,0,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0,0"))
      (rule "elementOfIntersect" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
      (rule "equalUnique" (formula "1") (term "1,1,0,0,0"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0,0"))
      (rule "concrete_or_2" (formula "1") (term "0,0"))
      (rule "arrayLengthNotNegative" (formula "12") (term "1"))
      (rule "arrayLengthIsAShort" (formula "13") (term "1"))
      (rule "expand_inShort" (formula "13"))
      (rule "replace_short_MIN" (formula "13") (term "0,1"))
      (rule "replace_short_MAX" (formula "13") (term "1,0"))
      (rule "andLeft" (formula "13"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
      (rule "leq_literals" (formula "14") (term "0"))
      (rule "concrete_or_1" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "2"))
      (rule "leq_literals" (formula "5") (term "0"))
      (rule "concrete_or_1" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "arrayLengthIsAShort" (formula "14") (term "0"))
      (rule "expand_inShort" (formula "14"))
      (rule "replace_short_MIN" (formula "14") (term "0,1"))
      (rule "replace_short_MAX" (formula "14") (term "1,0"))
      (rule "andLeft" (formula "14"))
      (rule "inEqSimp_commuteLeq" (formula "15"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
      (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "12"))
      (rule "leq_literals" (formula "14") (term "0"))
      (rule "concrete_or_1" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "arrayLengthNotNegative" (formula "14") (term "0"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,1,1,1,0") (ifseqformula "5"))
      (rule "allLeft" (formula "18") (inst "t=i_0"))
      (rule "replaceKnownSelect_taclet00_7" (formula "18") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "22"))
      (rule "concrete_or_2" (formula "18") (term "0,0"))
      (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "18") (term "1,0") (ifseqformula "2"))
      (rule "qeq_literals" (formula "18") (term "0,1,0"))
      (rule "concrete_and_2" (formula "18") (term "1,0"))
      (rule "concrete_or_4" (formula "18") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
      (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "18") (term "0,0,1"))
      (rule "leq_literals" (formula "18") (term "0,1"))
      (rule "concrete_and_2" (formula "18") (term "1"))
      (rule "concrete_or_4" (formula "18"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "18"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (rule "concrete_and_2" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
   (branch
      (rule "allRight" (formula "14") (inst "sk=f_0"))
      (rule "allRight" (formula "14") (inst "sk=o_0"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "orRight" (formula "14"))
      (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
      (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "19"))
      (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "18"))
      (rule "concrete_or_4" (formula "1") (term "0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfIntersect" (formula "1") (term "1,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "1,1,0,0,0") (ifseqformula "17"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0,0"))
      (rule "elementOfIntersect" (formula "1") (term "1,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,1,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "1,1,0,0,0") (ifseqformula "16"))
      (rule "concrete_and_4" (formula "1") (term "1,0,0,0"))
      (rule "concrete_or_4" (formula "1") (term "0,0,0"))
      (rule "elementOfIntersect" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "15"))
      (rule "concrete_and_4" (formula "1") (term "0,0,0"))
      (rule "concrete_and_2" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "close" (formula "19") (ifseqformula "1"))
   )
)
(branch "Exceptional Post (clear)"
   (rule "instanceof_static_type" (formula "7") (term "0,0,0,1,1,1,0,0,1,1,1,1,1"))
   (rule "instanceof_static_type" (formula "7") (term "0,0,0,1,1,1,1,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "7") (term "0,0,1,1,1,0,0,1,1,1,1,1"))
   (rule "boolean_equal" (formula "7") (term "0,0,1,1,1,1,0,1,1,1,1,1"))
   (rule "intersectWithItself" (formula "7") (term "0,1,0,0,1,1"))
   (rule "eq_and" (formula "7") (term "0,1,1,1,1,1"))
   (rule "concrete_impl_1" (formula "7") (term "0,1,1,1,0,1,1,1,1,1"))
   (rule "expand_inInt" (formula "7") (term "1,0,0,1,0,0,1,1,1,1,1,1,1"))
   (rule "replace_int_MIN" (formula "7") (term "0,1,1,0,0,1,0,0,1,1,1,1,1,1,1"))
   (rule "replace_int_MAX" (formula "7") (term "1,0,1,0,0,1,0,0,1,1,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "replace_known_left" (formula "7") (term "0,0,1,0") (ifseqformula "5"))
   (rule "ifthenelse_true" (formula "7") (term "0,1,0"))
   (rule "replace_known_left" (formula "7") (term "0,1,1,0") (ifseqformula "5"))
   (rule "ifthenelse_true" (formula "7") (term "1,1,0"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "andLeft" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "simplifyUpdate2" (formula "10") (term "0"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "0"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "simplifyUpdate1" (formula "8") (term "1"))
   (rule "applyOnRigidFormula" (formula "10") (term "1"))
   (rule "simplifyUpdate2" (formula "10") (term "1,1"))
   (rule "replace_known_right" (formula "10") (term "1,1") (ifseqformula "11"))
   (rule "concrete_and_4" (formula "10") (term "1"))
   (rule "concrete_impl_3" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "replace_known_right" (formula "9") (term "1,0") (ifseqformula "10"))
   (rule "simplifyUpdate2" (formula "9") (term "0"))
   (rule "concrete_impl_2" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyOnRigidTerm" (formula "8") (term "0"))
   (rule "applyOnPV" (formula "8") (term "0,0"))
   (rule "simplifyUpdate1" (formula "8") (term "2,0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (ifseqformula "7"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,1"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate1" (formula "9") (term "1"))
   (rule "applyOnPV" (formula "9") (term "0"))
   (rule "close" (formula "9") (ifseqformula "5"))
)
(branch "Pre (clear)"
   (rule "eq_or_2" (formula "7") (term "0,1,1"))
   (rule "eq_or" (formula "7") (term "0,1,1"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "5"))
   (rule "concrete_and_1" (formula "7"))
   (rule "close" (formula "7") (ifseqformula "1"))
)
)
}
