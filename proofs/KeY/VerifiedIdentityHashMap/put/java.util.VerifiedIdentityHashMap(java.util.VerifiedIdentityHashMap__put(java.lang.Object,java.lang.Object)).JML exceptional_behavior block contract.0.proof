\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat May 22 11:34:06 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=100000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Sat May 22 11:34:06 CEST 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:put(java.lang.Object,java.lang.Object)].JML exceptional_behavior block contract.0
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:put(java.lang.Object,java.lang.Object)].JML exceptional_behavior block contract.0
class=de.uka.ilkd.key.proof.init.FunctionalBlockContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "a6034b00a3"))

(autoModeTime "478")

(branch "dummy ID"
(rule "false_to_not_true" (formula "1") (term "0,0,0,0,1,1,1,1,1") (newnames "self,anonOut_heap,heap_Before_METHOD,savedHeap_Before_METHOD,len_Before_METHOD#11,value_Before_METHOD#12,k_Before_METHOD#13,i_Before_METHOD#14,tab_Before_METHOD#15,returned#8,result#9,exc#10,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f,anonIn_heap,anonIn_len,anonIn_value,anonIn_k,anonIn_i,anonIn_tab"))
(rule "insert_constant_value" (formula "1") (term "0,1,1,1,0,0,0,0,0,0,1,1,1,1"))
(rule "insert_constant_value" (formula "1") (term "1,1,1,0,1,0,0,0,0,0,0,1,1,1,1"))
(rule "expand_inInt" (formula "1") (term "0,0,0,0,1,0,0,0,0,1,1,1,1"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0,0,1,1,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,0,0,0,1,0,0,0,0,1,1,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,0,0,0,1,0,0,0,0,1,1,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,1,1,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,1,1,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1,1,1"))
(rule "translateJavaSubInt" (formula "3") (term "1,1,1,0,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "3") (term "0,0,0,1,0,0,0,0,0,0,1,1"))
(rule "translateJavaMulInt" (formula "3") (term "1,1,0,1,0,0,0,0,0,0,1,1"))
(rule "sequentialToParallel2" (formula "3"))
(rule "simplifyUpdate3" (formula "3") (term "1,0"))
(rule "impRight" (formula "3"))
(rule "simplifyUpdate2" (formula "1"))
(rule "applyOnSkip" (formula "1") (term "1,0"))
(rule "parallelWithSkip2" (formula "1") (term "0"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "simplifyUpdate2" (formula "4"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "applyOnElementary" (formula "13") (term "1,0"))
(rule "applyOnPV" (formula "13") (term "0,1,0"))
(rule "andLeft" (formula "4"))
(rule "simplifyUpdate2" (formula "5"))
(rule "simplifyUpdate2" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "simplifyUpdate2" (formula "5"))
(rule "simplifyUpdate2" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "applyOnRigidFormula" (formula "13"))
(rule "simplifyUpdate1" (formula "13") (term "1"))
(rule "applyOnRigidFormula" (formula "12"))
(rule "simplifyUpdate2" (formula "12") (term "0"))
(rule "applyOnRigidFormula" (formula "5"))
(rule "applyOnPV" (formula "5") (term "0"))
(rule "applyOnRigidFormula" (formula "10"))
(rule "simplifyUpdate1" (formula "10") (term "1"))
(rule "applyOnPV" (formula "10") (term "0"))
(rule "applyOnRigidFormula" (formula "11"))
(rule "simplifyUpdate1" (formula "11") (term "0"))
(rule "applyOnPV" (formula "11") (term "1"))
(rule "applyOnRigidFormula" (formula "9"))
(rule "simplifyUpdate2" (formula "9") (term "0"))
(rule "applyOnRigidFormula" (formula "4"))
(rule "simplifyUpdate1" (formula "4") (term "1"))
(rule "applyOnRigidFormula" (formula "8"))
(rule "simplifyUpdate2" (formula "8") (term "0"))
(rule "applyOnRigidFormula" (formula "2"))
(rule "applyOnRigidFormula" (formula "3"))
(rule "simplifyUpdate1" (formula "3") (term "1"))
(rule "applyOnRigidFormula" (formula "6"))
(rule "simplifyUpdate1" (formula "6") (term "1"))
(rule "applyOnPV" (formula "6") (term "0"))
(rule "applyOnRigidFormula" (formula "7"))
(rule "applyOnPV" (formula "7") (term "1"))
(rule "simplifyUpdate1" (formula "7") (term "0"))
(rule "applyOnRigidTerm" (formula "13") (term "0"))
(rule "applyOnPV" (formula "13") (term "0,0"))
(rule "simplifyUpdate1" (formula "13") (term "2,0"))
(rule "selectCreatedOfAnonAsFormula" (formula "13"))
(rule "simplifyUpdate1" (formula "13") (term "1,0,1"))
(rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "12") (term "1"))
(rule "simplifyUpdate1" (formula "12") (term "1,1"))
(rule "applyOnRigidFormula" (formula "12") (term "0"))
(rule "simplifyUpdate1" (formula "12") (term "1,0"))
(rule "applyOnPV" (formula "12") (term "0,0"))
(rule "applyOnRigidFormula" (formula "9") (term "1"))
(rule "simplifyUpdate1" (formula "9") (term "1,1"))
(rule "applyOnRigidFormula" (formula "9") (term "0"))
(rule "simplifyUpdate1" (formula "9") (term "1,0"))
(rule "applyOnPV" (formula "9") (term "0,0"))
(rule "applyOnRigidTerm" (formula "4") (term "0"))
(rule "simplifyUpdate1" (formula "4") (term "2,0"))
(rule "simplifyUpdate1" (formula "4") (term "1,0"))
(rule "applyOnPV" (formula "4") (term "0,0"))
(rule "applyOnRigidFormula" (formula "8") (term "1"))
(rule "simplifyUpdate1" (formula "8") (term "1,1"))
(rule "applyOnRigidFormula" (formula "8") (term "0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0"))
(rule "applyOnPV" (formula "8") (term "0,0"))
(rule "applyOnRigidTerm" (formula "2") (term "1"))
(rule "applyOnPV" (formula "2") (term "0,1"))
(rule "simplifyUpdate1" (formula "2") (term "1,1"))
(rule "simplifyUpdate1" (formula "2") (term "2,1"))
(rule "applyOnRigidTerm" (formula "2") (term "0"))
(rule "simplifyUpdate1" (formula "2") (term "1,0"))
(rule "applyOnRigidTerm" (formula "3") (term "0"))
(rule "applyOnPV" (formula "3") (term "0,0"))
(rule "applyOnRigidTerm" (formula "12") (term "0,1"))
(rule "simplifyUpdate1" (formula "12") (term "2,0,1"))
(rule "simplifyUpdate1" (formula "12") (term "1,0,1"))
(rule "simplifyUpdate1" (formula "12") (term "0,0,1"))
(rule "applyOnPV" (formula "12") (term "1,0,1"))
(rule "applyOnPV" (formula "12") (term "0,0,1"))
(rule "selectCreatedOfAnonAsFormula" (formula "12") (term "1"))
(rule "applyOnRigidTerm" (formula "9") (term "0,1"))
(rule "simplifyUpdate1" (formula "9") (term "1,0,1"))
(rule "simplifyUpdate1" (formula "9") (term "2,0,1"))
(rule "simplifyUpdate1" (formula "9") (term "0,0,1"))
(rule "applyOnPV" (formula "9") (term "1,0,1"))
(rule "applyOnPV" (formula "9") (term "0,0,1"))
(rule "selectCreatedOfAnonAsFormula" (formula "9") (term "1"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1"))
(rule "simplifyUpdate1" (formula "8") (term "1,0,1"))
(rule "simplifyUpdate1" (formula "8") (term "2,0,1"))
(rule "applyOnPV" (formula "8") (term "0,0,1"))
(rule "selectCreatedOfAnonAsFormula" (formula "8") (term "1"))
(rule "applyOnPV" (formula "8") (term "1,0,1,1"))
(rule "applyOnPV" (formula "8") (term "1,0,0,1"))
(rule "applyOnRigidTerm" (formula "2") (term "0,0"))
(rule "simplifyUpdate1" (formula "2") (term "2,0,0"))
(rule "simplifyUpdate1" (formula "2") (term "1,0,0"))
(rule "applyOnPV" (formula "2") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteGeq" (formula "2"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "returned#8_1"))
(rule "assignment" (formula "18") (term "1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "result#9_1"))
(rule "assignment" (formula "18") (term "1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "exc#10_1"))
(rule "assignment" (formula "18") (term "1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "elementOfUnion" (formula "18") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "18") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "18") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfAllFields" (formula "18") (term "1,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "18") (term "0,0,0,0,0,0,1,0,1"))
(rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=java_util_VerifiedIdentityHashMap_threshold_0"))
(rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
(rule "simplifySelectOfAnon" (formula "4"))
(rule "elementOfFreshLocs" (formula "4") (term "1,0,0"))
(rule "elementOfAllLocs" (formula "4") (term "0,0,0,0"))
(rule "concrete_and_1" (formula "4") (term "0,0,0"))
(rule "equalUnique" (formula "4") (term "0,0,0,0"))
(rule "concrete_not_2" (formula "4") (term "0,0,0"))
(rule "concrete_or_1" (formula "4") (term "0,0"))
(rule "ifthenelse_true" (formula "4") (term "0"))
(rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
(rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "4"))
(rule "hideAuxiliaryEq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "2"))
(rule "applyEq" (formula "2") (term "1") (ifseqformula "4"))
(rule "pullOutSelect" (formula "2") (term "0,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_size_0"))
(rule "simplifySelectOfAnon" (formula "2"))
(rule "elementOfFreshLocs" (formula "2") (term "1,0,0"))
(rule "elementOfAllLocs" (formula "2") (term "0,0,0,0"))
(rule "concrete_and_1" (formula "2") (term "0,0,0"))
(rule "equalUnique" (formula "2") (term "0,0,0,0"))
(rule "concrete_not_2" (formula "2") (term "0,0,0"))
(rule "concrete_or_1" (formula "2") (term "0,0"))
(rule "ifthenelse_true" (formula "2") (term "0"))
(rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
(rule "hideAuxiliaryEq" (formula "2"))
(rule "expand_subJint" (formula "4") (term "1"))
(rule "sub_literals" (formula "4") (term "0,1"))
(rule "expand_mulJint" (formula "3") (term "1"))
(rule "mul_literals" (formula "3") (term "0,1"))
(rule "expand_subJint" (formula "2") (term "1"))
(rule "sub_literals" (formula "2") (term "0,1"))
(rule "expand_addJint" (formula "2") (term "0"))
(rule "polySimp_addComm0" (formula "2") (term "0,0"))
(rule "expand_moduloInteger" (formula "4") (term "1"))
(rule "replace_int_MIN" (formula "4") (term "0,1"))
(rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,1"))
(rule "replace_int_RANGE" (formula "4") (term "1,1,1"))
(rule "add_literals" (formula "4") (term "0,1,1"))
(rule "mod_axiom" (formula "4") (term "1,1"))
(rule "div_literals" (formula "4") (term "0,0,1,1,1"))
(rule "times_zero_2" (formula "4") (term "0,1,1,1"))
(rule "mul_literals" (formula "4") (term "1,1,1"))
(rule "add_literals" (formula "4") (term "1,1"))
(rule "add_literals" (formula "4") (term "1"))
(rule "expand_moduloInteger" (formula "3") (term "1"))
(rule "replace_int_MIN" (formula "3") (term "0,1"))
(rule "replace_int_RANGE" (formula "3") (term "1,1,1"))
(rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,1"))
(rule "add_literals" (formula "3") (term "0,1,1"))
(rule "mod_axiom" (formula "3") (term "1,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1"))
(rule "div_literals" (formula "3") (term "0,1,1,1"))
(rule "mul_literals" (formula "3") (term "1,1,1"))
(rule "add_zero_right" (formula "3") (term "1,1"))
(rule "add_literals" (formula "3") (term "1"))
(rule "expand_moduloInteger" (formula "2") (term "1"))
(rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,1"))
(rule "replace_int_MIN" (formula "2") (term "0,1"))
(rule "replace_int_RANGE" (formula "2") (term "1,1,1"))
(rule "add_literals" (formula "2") (term "0,1,1"))
(rule "mod_axiom" (formula "2") (term "1,1"))
(rule "div_literals" (formula "2") (term "0,0,1,1,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,1"))
(rule "mul_literals" (formula "2") (term "1,1,1"))
(rule "add_zero_right" (formula "2") (term "1,1"))
(rule "add_literals" (formula "2") (term "1"))
(rule "expand_moduloInteger" (formula "2") (term "0"))
(rule "replace_int_RANGE" (formula "2") (term "1,1,0"))
(rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,0"))
(rule "replace_int_MIN" (formula "2") (term "0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,1,0"))
(rule "inEqSimp_homoInEq1" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0"))
(rule "mul_literals" (formula "2") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0"))
(rule "add_literals" (formula "2") (term "0,0"))
(rule "mod_axiom" (formula "2") (term "0,1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
(rule "mul_literals" (formula "2") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0"))
(rule "add_literals" (formula "2") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1"))
(rule "polySimp_rightDist" (formula "2") (term "1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
(rule "mul_literals" (formula "2") (term "0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1"))
(rule "polyDiv_pullOut" (formula "2") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,2,0,0"))
(rule "equal_literals" (formula "2") (term "0,0,0"))
(rule "ifthenelse_false" (formula "2") (term "0,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_addComm0" (formula "2") (term "1,0"))
(rule "polySimp_rightDist" (formula "2") (term "0"))
(rule "mul_literals" (formula "2") (term "0,0"))
(rule "inEqSimp_homoInEq0" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
(rule "mul_literals" (formula "2") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0"))
(rule "add_literals" (formula "2") (term "0,0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "shift_paren_or" (formula "12"))
(rule "shift_paren_or" (formula "9"))
(rule "shift_paren_or" (formula "8"))
(rule "postincrement_attribute" (formula "18") (term "1") (inst "#v=v"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "v"))
(rule "assignment" (formula "18") (term "1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "eval_order_access4" (formula "18") (term "1") (inst "#v1=x") (inst "#v0=v_1"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "v_1"))
(rule "assignment" (formula "18") (term "1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "applyOnElementary" (formula "18") (term "1,0"))
(rule "applyOnPV" (formula "18") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
(rule "compound_int_cast_expression" (formula "18") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
(rule "remove_parentheses_right" (formula "18") (term "1"))
(rule "compound_addition_1" (formula "18") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x_2"))
(rule "assignment_read_attribute" (formula "18"))
(branch "Normal Execution (v != null)"
   (rule "sequentialToParallel2" (formula "18"))
   (rule "simplifyUpdate2" (formula "18"))
   (rule "simplifyUpdate3" (formula "18") (term "1,0"))
   (rule "applyOnElementary" (formula "18") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "18") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "18") (term "1,0,1,0"))
   (rule "pullOutSelect" (formula "18") (term "0,1,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_modCount_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
   (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
   (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
   (rule "concrete_and_1" (formula "1") (term "0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,0,0,0"))
   (rule "concrete_not_2" (formula "1") (term "0,0,0"))
   (rule "concrete_or_1" (formula "1") (term "0,0"))
   (rule "ifthenelse_true" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "assignmentAdditionInt" (formula "18") (term "1"))
   (rule "translateJavaAddInt" (formula "18") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "18"))
   (rule "simplifyUpdate2" (formula "18"))
   (rule "simplifyUpdate3" (formula "18") (term "1,0"))
   (rule "applyOnElementary" (formula "18") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
   (rule "applyOnPV" (formula "18") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
   (rule "expand_addJint" (formula "18") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "18") (term "0,1,0"))
   (rule "replace_int_MIN" (formula "18") (term "0,0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,0,1,0"))
   (rule "replace_int_RANGE" (formula "18") (term "1,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "18") (term "0,0,1,0,1,0"))
   (rule "polyMod_pullOut" (formula "18") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,1,0"))
   (rule "mul_literals" (formula "18") (term "1,0,1,0,1,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "18") (term "0,0,1,0,1,0"))
   (rule "arrayLengthIsAShort" (formula "3") (term "0"))
   (rule "expand_inShort" (formula "3"))
   (rule "replace_short_MAX" (formula "3") (term "1,0"))
   (rule "replace_short_MIN" (formula "3") (term "0,1"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_commuteLeq" (formula "4"))
   (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
(branch "Null Reference (v = null)"
   (rule "false_right" (formula "19"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "close" (formula "18") (ifseqformula "1"))
)
)
}
