\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 18 20:56:26 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=600
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Mon Oct 18 20:56:26 CEST 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:containsMapping(java.lang.Object,java.lang.Object)].JML normal_behavior operation contract.1
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:containsMapping(java.lang.Object,java.lang.Object)].JML normal_behavior operation contract.1
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "40b2d39292"))

(autoModeTime "872")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "key,value,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "translateJavaMulInt" (formula "11") (term "0,2,0,0,1,0,0,1,0,0,0,0,1"))
(rule "translateJavaAddInt" (formula "11") (term "0,2,0,1,1,0,0,1,0,0,0,0,1"))
(rule "eqSymm" (formula "11") (term "0,0,1,0,1"))
(rule "translateJavaDivInt" (formula "11") (term "1,1,0,0,0,0,1,0,0,0,0,1"))
(rule "translateJavaMulInt" (formula "11") (term "0,0,2,0,1,1,0,0,1,0,0,0,0,1"))
(rule "eqSymm" (formula "11") (term "0,0,0,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "10"))
(rule "concrete_or_2" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "9"))
(rule "concrete_or_2" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "11") (term "1"))
(rule "sequentialToParallel2" (formula "11"))
(rule "simplifyUpdate3" (formula "11") (term "1,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_containsMapping,savedHeapBefore_containsMapping,_keyBefore_containsMapping,_valueBefore_containsMapping"))
(rule "simplifyUpdate2" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "k"))
 (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_maskNull,result_0,exc_0") (contract "java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap::maskNull(java.lang.Object)].JML normal_behavior operation contract.0"))
(branch "Post (maskNull)"
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "simplifyUpdate2" (formula "8") (term "1"))
   (rule "andLeft" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "simplifyUpdate2" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "12"))
   (rule "eqSymm" (formula "9") (term "1,1"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "13"))
   (rule "concrete_or_2" (formula "8"))
   (rule "applyOnRigidFormula" (formula "10"))
   (rule "applyOnRigidFormula" (formula "9"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "applyOnRigidFormula" (formula "10") (term "0"))
   (rule "applyOnRigidFormula" (formula "10") (term "1"))
   (rule "applyOnPV" (formula "10") (term "1,1"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "9") (term "0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0"))
   (rule "applyOnPV" (formula "9") (term "0,0"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "16"))
   (rule "concrete_impl_2" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
   (rule "applyOnPV" (formula "9") (term "0,0,0"))
   (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "15"))
   (rule "concrete_not_2" (formula "9") (term "0"))
   (rule "concrete_impl_1" (formula "9"))
   (rule "assignment" (formula "16") (term "1"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "tab"))
   (rule "assignment_read_attribute_this" (formula "16"))
   (rule "sequentialToParallel2" (formula "16"))
   (rule "simplifyUpdate3" (formula "16") (term "1,0"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "len"))
   (rule "assignment_read_length" (formula "16"))
   (branch "Normal Execution (tab != null)"
      (rule "sequentialToParallel2" (formula "16"))
      (rule "simplifyUpdate3" (formula "16") (term "1,0"))
      (rule "applyOnElementary" (formula "16") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
      (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "i"))
       (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_hash,result_1,exc_1") (contract "java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap::hash(java.lang.Object,int)].JML normal_behavior operation contract.0"))
      (branch "Post (hash)"
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12") (term "1"))
         (rule "andLeft" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "translateJavaMod" (formula "15") (term "0"))
         (rule "eqSymm" (formula "14") (term "1"))
         (rule "applyOnRigidFormula" (formula "16"))
         (rule "simplifyUpdate1" (formula "16") (term "0"))
         (rule "applyOnPV" (formula "16") (term "1"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "simplifyUpdate2" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "14"))
         (rule "simplifyUpdate1" (formula "14") (term "1"))
         (rule "applyOnRigidFormula" (formula "13") (term "0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0"))
         (rule "applyOnPV" (formula "13") (term "0,0"))
         (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "19"))
         (rule "concrete_impl_2" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "applyOnRigidTerm" (formula "13") (term "0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0"))
         (rule "simplifyUpdate1" (formula "13") (term "0,0"))
         (rule "applyOnPV" (formula "13") (term "1,0"))
         (rule "applyOnPV" (formula "13") (term "0,0"))
         (rule "assignment" (formula "22") (term "1"))
         (rule "sequentialToParallel2" (formula "22"))
         (rule "simplifyUpdate3" (formula "22") (term "1,0"))
         (rule "variableDeclarationGhostAssign" (formula "22") (term "1"))
         (rule "variableDeclarationGhost" (formula "22") (term "1") (newnames "hash"))
         (rule "assignment" (formula "22") (term "1"))
         (rule "sequentialToParallel2" (formula "22"))
         (rule "simplifyUpdate3" (formula "22") (term "1,0"))
         (rule "applyOnElementary" (formula "22") (term "1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0"))
         (rule "arrayLengthIsAShort" (formula "15") (term "1"))
         (rule "arrayLengthNotNegative" (formula "16") (term "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,1") (ifseqformula "1"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_45_in_VerifiedIdentityHashMap" (formula "7"))
         (rule "insert_constant_value" (formula "7") (term "1,1,0,1"))
         (rule "insert_constant_value" (formula "7") (term "0,1,1,0"))
         (rule "andLeft" (formula "7"))
         (rule "translateJavaSubInt" (formula "7") (term "1,1"))
         (rule "translateJavaDivInt" (formula "7") (term "1,0"))
         (rule "translateJavaDivInt" (formula "8") (term "1,1"))
         (rule "translateJavaMulInt" (formula "8") (term "1,0"))
         (rule "commute_or" (formula "7"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_35_in_VerifiedIdentityHashMap" (formula "9"))
         (rule "translateJavaBitwiseAndInt" (formula "9") (term "0"))
         (rule "translateJavaSubInt" (formula "9") (term "1,0"))
         (rule "andJIntDef" (formula "9") (term "0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_21_in_VerifiedIdentityHashMap" (formula "10"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_39_in_VerifiedIdentityHashMap" (formula "11") (inst "i=i_1"))
         (rule "exLeft" (formula "11") (inst "sk=i_1_0"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "translateJavaMulInt" (formula "14") (term "0,2,0"))
         (rule "translateJavaDivInt" (formula "12") (term "1"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0") (ifseqformula "1"))
         (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "15"))
         (rule "concrete_or_1" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_27_in_VerifiedIdentityHashMap" (formula "15"))
         (rule "insert_constant_value" (formula "15") (term "0,1,1,0"))
         (rule "insert_constant_value" (formula "15") (term "1,1,0,1"))
         (rule "andLeft" (formula "15"))
         (rule "translateJavaDivInt" (formula "15") (term "1,0"))
         (rule "translateJavaSubInt" (formula "15") (term "1,1"))
         (rule "translateJavaDivInt" (formula "16") (term "1,1"))
         (rule "translateJavaMulInt" (formula "16") (term "1,0"))
         (rule "commute_or" (formula "15"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_VerifiedIdentityHashMap" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0") (ifseqformula "1"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
         (rule "concrete_or_2" (formula "1"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_VerifiedIdentityHashMap" (formula "16"))
         (rule "insert_constant_value" (formula "16") (term "0,0,1"))
         (rule "insert_constant_value" (formula "16") (term "0,0,1,0"))
         (rule "insert_constant_value" (formula "16") (term "0,1,0,0"))
         (rule "eqClose" (formula "16") (term "1,0,0"))
         (rule "concrete_and_3" (formula "16") (term "0,0"))
         (rule "insert_constant_value" (formula "16") (term "0,1,0,0"))
         (rule "eqClose" (formula "16") (term "1,0,0"))
         (rule "concrete_and_3" (formula "16") (term "0,0"))
         (rule "insert_constant_value" (formula "16") (term "0,1,0,0"))
         (rule "eqClose" (formula "16") (term "1,0,0"))
         (rule "concrete_and_3" (formula "16") (term "0,0"))
         (rule "mul_literals" (formula "16") (term "0,1"))
         (rule "mul_literals" (formula "16") (term "0,1,0"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "16"))
         (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
         (rule "concrete_or_2" (formula "28"))
         (rule "inEqSimp_commuteGeq" (formula "17"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_VerifiedIdentityHashMap" (formula "18") (inst "i=i_1"))
         (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "commute_and" (formula "18") (term "0,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_VerifiedIdentityHashMap" (formula "19") (inst "i=i_1") (inst "j=j"))
         (rule "eqSymm" (formula "19") (term "1,1,0,1,0"))
         (rule "eqSymm" (formula "19") (term "1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,2,0,0,0,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,2,1,1,0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "0,2,0,1,0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "commute_and" (formula "19") (term "0,0"))
         (rule "commute_and" (formula "19") (term "0,0,1,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_9_in_VerifiedIdentityHashMap" (formula "20") (inst "i=i_1"))
         (rule "eqSymm" (formula "20"))
         (rule "polySimp_mulComm0" (formula "20") (term "0,2,0,0,0,2,0"))
         (rule "ifthenelse_negated" (formula "20") (term "2,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_11_in_VerifiedIdentityHashMap" (formula "21") (inst "i=i_1"))
         (rule "exLeft" (formula "21") (inst "sk=i_1_1"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "eqSymm" (formula "23"))
         (rule "inEqSimp_commuteLeq" (formula "21"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_13_in_VerifiedIdentityHashMap" (formula "24"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_15_in_VerifiedIdentityHashMap" (formula "25") (inst "i=i_1"))
         (rule "exLeft" (formula "25") (inst "sk=i_1_2"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "polySimp_mulComm0" (formula "27") (term "0,2,0"))
         (rule "inEqSimp_commuteLeq" (formula "25"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "28"))
         (rule "concrete_or_1" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_19_in_VerifiedIdentityHashMap" (formula "28") (inst "i=i_1") (inst "j=j"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,2,0,0,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,2,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,2,0,0,1,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,2,0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,1,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,1,0,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0,1,1,0"))
         (rule "commute_and" (formula "28") (term "0,0"))
         (rule "commute_and" (formula "28") (term "1,0,0,1,1,0"))
         (rule "commute_and" (formula "28") (term "0,0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "28") (term "1,0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "1,1,0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "0,1,0,0,1,1,0"))
         (rule "cnf_rightDist" (formula "28") (term "0,0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "1,0,0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "0,0,0,0,1,1,0"))
         (rule "shift_paren_and" (formula "28") (term "0,0,1,1,0"))
         (rule "commute_and_2" (formula "28") (term "0,0,1,1,0"))
         (rule "commute_and_2" (formula "28") (term "0,0,0,1,1,0"))
         (rule "commute_and_2" (formula "28") (term "0,0,1,1,0"))
         (rule "commute_and" (formula "28") (term "0,0,0,0,1,1,0"))
         (rule "commute_and_2" (formula "28") (term "0,0,0,1,1,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_23_in_VerifiedIdentityHashMap" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_31_in_VerifiedIdentityHashMap" (formula "31") (inst "i=i_1"))
         (rule "translateJavaAddInt" (formula "31") (term "0,2,0,1,1,0"))
         (rule "translateJavaMulInt" (formula "31") (term "0,2,0,0,1,0"))
         (rule "translateJavaDivInt" (formula "31") (term "1,1,0,0,0"))
         (rule "translateJavaMulInt" (formula "31") (term "0,0,2,0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
         (rule "commute_and_2" (formula "31") (term "0,0"))
         (rule "commute_and" (formula "31") (term "0,0,0"))
         (rule "commute_and_2" (formula "31") (term "0,0"))
         (rule "Partial_inv_axiom_for_JML_class_invariant_nr_29_in_VerifiedIdentityHashMap" (formula "32"))
         (rule "insert_constant_value" (formula "32") (term "0,1"))
         (rule "insert_constant_value" (formula "32") (term "0,1,0"))
         (rule "insert_constant_value" (formula "32") (term "0,1,0,0"))
         (rule "eqClose" (formula "32") (term "1,0,0"))
         (rule "concrete_and_3" (formula "32") (term "0,0"))
         (rule "equal_literals" (formula "32") (term "1"))
         (rule "concrete_and_4" (formula "32"))
         (rule "closeFalse" (formula "32"))
      )
      (branch "Exceptional Post (hash)"
         (rule "simplifyUpdate2" (formula "12"))
         (rule "simplifyUpdate2" (formula "12") (term "1"))
         (rule "andLeft" (formula "12"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "simplifyUpdate2" (formula "14"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "14"))
         (rule "simplifyUpdate2" (formula "15"))
         (rule "notLeft" (formula "12"))
         (rule "close" (formula "15") (ifseqformula "14"))
      )
      (branch "Pre (hash)"
         (rule "simplifyUpdate2" (formula "16"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "applyOnRigidFormula" (formula "16"))
         (rule "simplifyUpdate2" (formula "16") (term "0"))
         (rule "applyOnRigidFormula" (formula "16") (term "1"))
         (rule "simplifyUpdate2" (formula "16") (term "0,1"))
         (rule "simplifyUpdate2" (formula "16") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "16") (term "0"))
         (rule "simplifyUpdate2" (formula "16") (term "0,0"))
         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "10"))
         (rule "concrete_and_1" (formula "16") (term "0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
         (rule "simplifyUpdate2" (formula "16") (term "0,0,1"))
         (rule "replace_known_left" (formula "16") (term "0,0,1") (ifseqformula "1"))
         (rule "concrete_and_1" (formula "16") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
         (rule "applyOnPV" (formula "16") (term "0,1,1"))
         (rule "applyOnRigidFormula" (formula "16") (term "0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,0"))
         (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "12"))
         (rule "concrete_not_2" (formula "16") (term "0"))
         (rule "concrete_and_1" (formula "16"))
         (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,0"))
         (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "12"))
         (rule "concrete_or_2" (formula "16") (term "0"))
         (rule "applyOnRigidTerm" (formula "16") (term "0,0"))
         (rule "simplifyUpdate1" (formula "16") (term "2,0,0"))
         (rule "simplifyUpdate1" (formula "16") (term "0,0,0"))
         (rule "applyOnPV" (formula "16") (term "1,0,0"))
         (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "16"))
         (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "8"))
         (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7") (inst "i=i_10") (inst "j=j") (inst "i_0=i_0") (inst "i_1=i_1") (inst "j_0=j_0") (inst "i_2=i_2") (inst "i_3=i_3") (inst "j_1=j_1") (inst "i_4=i_4") (inst "j_2=j_2") (inst "i_5=i_5") (inst "i_6=i_6") (inst "i_7=i_7") (inst "i_8=i_8") (inst "j_3=j_3") (inst "i_9=i_9") (ifseqformula "3"))
         (rule "insert_constant_value" (formula "7") (term "0,1,1,0,1"))
         (rule "insert_constant_value" (formula "7") (term "1,1,0,1,1"))
         (rule "insert_constant_value" (formula "7") (term "0,1,1,1,1,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,1,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "7") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,1,1,1,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "7") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "7") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "7") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "7") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "7") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "equal_literals" (formula "7") (term "1,1,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_4" (formula "7") (term "1,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_4" (formula "7") (term "0,0,0,0,0,0,0,0"))
         (rule "concrete_and_2" (formula "7") (term "0,0,0,0,0,0,0"))
         (rule "concrete_and_2" (formula "7") (term "0,0,0,0,0,0"))
         (rule "concrete_and_2" (formula "7") (term "0,0,0,0,0"))
         (rule "concrete_and_2" (formula "7") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "7") (term "0,0,0"))
         (rule "concrete_and_2" (formula "7") (term "0,0"))
         (rule "concrete_and_2" (formula "7") (term "0"))
         (rule "concrete_and_2" (formula "7"))
         (rule "closeFalse" (formula "7"))
      )
   )
   (branch "Null Reference (tab = null)"
      (rule "false_right" (formula "17"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "10"))
      (rule "applyEq" (formula "12") (term "0") (ifseqformula "9"))
      (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (inst "i_1=i_1") (inst "j_0=j_0") (inst "i_2=i_2") (inst "i_3=i_3") (inst "j_1=j_1") (inst "i_4=i_4") (inst "j_2=j_2") (inst "i_5=i_5") (inst "i_6=i_6") (inst "i_7=i_7") (inst "i_8=i_8") (inst "j_3=j_3") (inst "i_9=i_9") (ifseqformula "4"))
      (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1"))
      (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1"))
      (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,1,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
      (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
      (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
      (rule "equal_literals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
      (rule "concrete_and_4" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
      (rule "concrete_and_4" (formula "8") (term "0,0,0,0,0,0,0,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0,0"))
      (rule "concrete_and_2" (formula "8") (term "0,0"))
      (rule "concrete_and_2" (formula "8") (term "0"))
      (rule "concrete_and_2" (formula "8"))
      (rule "closeFalse" (formula "8"))
   )
)
(branch "Exceptional Post (maskNull)"
   (rule "simplifyUpdate2" (formula "8"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "simplifyUpdate2" (formula "8") (term "1"))
   (rule "andLeft" (formula "8"))
   (rule "simplifyUpdate2" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (maskNull)"
   (rule "simplifyUpdate2" (formula "11"))
   (rule "simplifyUpdate2" (formula "11") (term "1"))
   (rule "applyOnRigidFormula" (formula "11"))
   (rule "applyOnRigidFormula" (formula "11") (term "0"))
   (rule "simplifyUpdate2" (formula "11") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "1"))
   (rule "simplifyUpdate2" (formula "11") (term "0,1"))
   (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "1"))
   (rule "concrete_and_1" (formula "11") (term "1"))
   (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "11") (term "1"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
   (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "10"))
   (rule "concrete_not_2" (formula "11") (term "1,0"))
   (rule "concrete_and_3" (formula "11") (term "0"))
   (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
   (rule "applyOnPV" (formula "11") (term "0,0,1"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1"))
   (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "10"))
   (rule "concrete_or_2" (formula "11") (term "1"))
   (rule "applyOnRigidFormula" (formula "11") (term "1"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1"))
   (rule "applyOnPV" (formula "11") (term "1,0,1"))
   (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "4"))
   (rule "concrete_and_3" (formula "11"))
   (rule "Static_class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "11"))
   (rule "notRight" (formula "11"))
   (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (inst "i_1=i_1") (inst "j_0=j_0") (inst "i_2=i_2") (inst "i_3=i_3") (inst "j_1=j_1") (inst "i_4=i_4") (inst "j_2=j_2") (inst "i_5=i_5") (inst "i_6=i_6") (inst "i_7=i_7") (inst "i_8=i_8") (inst "j_3=j_3") (inst "i_9=i_9") (ifseqformula "4"))
   (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1"))
   (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1"))
   (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,1,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
   (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "equal_literals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_4" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_4" (formula "8") (term "0,0,0,0,0,0,0,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0,0,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0,0"))
   (rule "concrete_and_2" (formula "8") (term "0,0"))
   (rule "concrete_and_2" (formula "8") (term "0"))
   (rule "concrete_and_2" (formula "8"))
   (rule "closeFalse" (formula "8"))
)
)
}
