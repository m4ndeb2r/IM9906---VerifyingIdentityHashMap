\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 18 20:43:52 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Mon Oct 18 20:43:52 CEST 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:containsKey(java.lang.Object)].JML normal_behavior operation contract.0
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:containsKey(java.lang.Object)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "1" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "2" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "3" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "4" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "5" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "6" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "7" (keyUser "mattias" ) (keyVersion "a587ae6"))
(keyLog "8" (keyUser "martindeboer" ) (keyVersion "a6034b00a3"))
(keyLog "9" (keyUser "martindeboer" ) (keyVersion "40b2d39292"))

(autoModeTime "1156074")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "key,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "hide_left" (formula "6") (userinteraction))
(rule "insert_hidden_taclet_0" (userinteraction))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "1") (inst "j_2=j_2") (inst "i_6=i_6") (inst "i_7=i_7") (inst "i_8=i_8") (inst "j_3=j_3") (inst "i_9=i_9") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (inst "j_0=j_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3") (inst "i_4=i_4") (inst "j_1=j_1") (inst "i_5=i_5") (ifseqformula "4"))
 (builtin "One Step Simplification" (formula "1"))
(rule "translateJavaDivInt" (formula "1") (term "1,0,0,1"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,1"))
(rule "translateJavaMulInt" (formula "1") (term "1,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,1,1,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,0,1,0,1,1,0,1,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "0,0,0,0,1,1,0,1,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,1,1,1,0,1,0,1,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,1,0,1,0,1,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,0,0,0,1,0,1,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,1,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,1,0,1,0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,1,0,0,0"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,0,1,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,1,1,0,1,0,1,0,1,0,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,1,0,1,0,1,0,1,0,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,1,0,1,0,0,0,0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,1,0,0,0,0,0,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,0,1,1,0,1,0,0,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,0,1,0,1,0,0,0,0,0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,1,1,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "1,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaDivInt" (formula "1") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,1,1,0,0,0,0,0,0,0,0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,1,0,0,0,0,0,1,1,0,1,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,0,2,0,1,1,0,1,0,0,0,0,0,0,0"))
(rule "equal_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "closeFalse" (formula "1"))
)
}
