\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jun 11 19:43:55 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=6000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Fri Jun 11 19:43:55 CEST 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:put(java.lang.Object,java.lang.Object)].JML normal_behavior block contract.2
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:put(java.lang.Object,java.lang.Object)].JML normal_behavior block contract.2
class=de.uka.ilkd.key.proof.init.FunctionalBlockContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "a6034b00a3"))

(autoModeTime "12585")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,1,1,0,0,1,1,1,1,1") (newnames "self,anonOut_heap,heap_Before_METHOD,savedHeap_Before_METHOD,value_Before_METHOD#11,k_Before_METHOD#12,i_Before_METHOD#13,tab_Before_METHOD#14,result#9,exc#10,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f,anonIn_heap,anonIn_value,anonIn_k,anonIn_i,anonIn_tab"))
(rule "expand_inInt" (formula "1") (term "0,1,1,1,1,0,0,0,0,0,0,1,1,1,1"))
(rule "expand_inInt" (formula "1") (term "1,0,1,0,0,0,0,1,1,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,1,0,0,1,1,1,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,1,0,0,1,1,1,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,1,0,0,0,0,1,1,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,1,0,0,0,0,1,1,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "translateJavaAddInt" (formula "3") (term "0,2,0,1,0,1,0,0,1,1,1,1"))
(rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1"))
(rule "translateJavaAddInt" (formula "3") (term "0,1,1,2,0,0,0,0,1,0,1,1,1,1"))
(rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,0,1,0,0,0,0,0,0,1,1,1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1,1,1,1"))
(rule "sequentialToParallel2" (formula "3") (term "1"))
(rule "simplifyUpdate3" (formula "3") (term "1,0,1"))
(rule "applyOnElementary" (formula "3") (term "1,0,1"))
(rule "applyOnPV" (formula "3") (term "0,1,0,1"))
(rule "sequentialToParallel2" (formula "3"))
(rule "simplifyUpdate3" (formula "3") (term "1,0"))
(rule "impRight" (formula "3"))
(rule "simplifyUpdate2" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "simplifyUpdate2" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "simplifyUpdate2" (formula "4"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "simplifyUpdate2" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "simplifyUpdate2" (formula "4"))
(rule "simplifyUpdate2" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "simplifyUpdate2" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "simplifyUpdate2" (formula "4"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "simplifyUpdate2" (formula "5"))
(rule "simplifyUpdate2" (formula "6"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "5"))
(rule "simplifyUpdate2" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "simplifyUpdate2" (formula "3"))
(rule "simplifyUpdate2" (formula "2"))
(rule "notLeft" (formula "2"))
(rule "applyOnRigidFormula" (formula "15"))
(rule "simplifyUpdate1" (formula "15") (term "1"))
(rule "applyOnRigidFormula" (formula "14"))
(rule "simplifyUpdate2" (formula "14") (term "0"))
(rule "replace_known_right" (formula "14") (term "0") (ifseqformula "19"))
(rule "concrete_or_2" (formula "14"))
(rule "applyOnRigidFormula" (formula "9"))
(rule "applyOnPV" (formula "9") (term "0"))
(rule "applyOnRigidFormula" (formula "13"))
(rule "applyOnPV" (formula "13") (term "1"))
(rule "simplifyUpdate1" (formula "13") (term "0"))
(rule "applyOnRigidFormula" (formula "12"))
(rule "simplifyUpdate1" (formula "12") (term "1"))
(rule "applyOnPV" (formula "12") (term "0"))
(rule "applyOnRigidFormula" (formula "10"))
(rule "simplifyUpdate2" (formula "10") (term "0"))
(rule "applyOnRigidFormula" (formula "11"))
(rule "simplifyUpdate2" (formula "11") (term "0"))
(rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "20"))
(rule "simplifyUpdate2" (formula "11") (term "0"))
(rule "concrete_or_2" (formula "11"))
(rule "applyOnRigidFormula" (formula "5"))
(rule "simplifyUpdate1" (formula "5") (term "1"))
(rule "applyOnRigidFormula" (formula "21"))
(rule "applyOnRigidFormula" (formula "4"))
(rule "simplifyUpdate1" (formula "4") (term "1"))
(rule "applyOnRigidFormula" (formula "20"))
(rule "simplifyUpdate1" (formula "20") (term "1"))
(rule "applyOnPV" (formula "20") (term "0"))
(rule "applyOnRigidFormula" (formula "8"))
(rule "simplifyUpdate1" (formula "8") (term "1"))
(rule "simplifyUpdate1" (formula "8") (term "0"))
(rule "applyOnRigidFormula" (formula "3"))
(rule "simplifyUpdate1" (formula "3") (term "0"))
(rule "simplifyUpdate1" (formula "3") (term "1"))
(rule "applyOnPV" (formula "3") (term "0"))
(rule "applyOnRigidFormula" (formula "7"))
(rule "simplifyUpdate1" (formula "7") (term "0"))
(rule "applyOnRigidFormula" (formula "6"))
(rule "simplifyUpdate1" (formula "6") (term "1"))
(rule "applyOnRigidFormula" (formula "2"))
(rule "simplifyUpdate1" (formula "2") (term "1"))
(rule "applyOnPV" (formula "2") (term "0"))
(rule "applyOnRigidFormula" (formula "19"))
(rule "applyOnPV" (formula "19") (term "0"))
(rule "simplifyUpdate1" (formula "19") (term "1"))
(rule "applyOnRigidTerm" (formula "15") (term "0"))
(rule "applyOnPV" (formula "15") (term "0,0"))
(rule "simplifyUpdate1" (formula "15") (term "2,0"))
(rule "selectCreatedOfAnonAsFormula" (formula "15"))
(rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
(rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
(rule "applyOnRigidFormula" (formula "14"))
(rule "simplifyUpdate1" (formula "14") (term "1"))
(rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,1,1,0,0,1"))
(rule "applyOnRigidFormula" (formula "10") (term "1"))
(rule "simplifyUpdate1" (formula "10") (term "1,1"))
(rule "applyOnRigidFormula" (formula "10") (term "0"))
(rule "applyOnPV" (formula "10") (term "0,0"))
(rule "simplifyUpdate1" (formula "10") (term "1,0"))
(rule "applyOnRigidFormula" (formula "11"))
(rule "simplifyUpdate1" (formula "11") (term "1"))
(rule "applyOnRigidTerm" (formula "5") (term "0"))
(rule "applyOnPV" (formula "5") (term "0,0"))
(rule "applyOnRigidFormula" (formula "21") (term "0"))
(rule "simplifyUpdate2" (formula "21") (term "0,0"))
(rule "applyOnRigidTerm" (formula "4") (term "0"))
(rule "simplifyUpdate1" (formula "4") (term "1,0"))
(rule "applyOnPV" (formula "4") (term "0,0"))
(rule "applyOnRigidTerm" (formula "8") (term "1"))
(rule "simplifyUpdate1" (formula "8") (term "2,1"))
(rule "applyOnPV" (formula "8") (term "0,1"))
(rule "simplifyUpdate1" (formula "8") (term "1,1"))
(rule "applyOnRigidTerm" (formula "8") (term "0"))
(rule "simplifyUpdate1" (formula "8") (term "2,0"))
(rule "simplifyUpdate1" (formula "8") (term "1,0"))
(rule "applyOnPV" (formula "8") (term "0,0"))
(rule "eqSymm" (formula "8"))
(rule "applyOnRigidTerm" (formula "3") (term "1"))
(rule "simplifyUpdate1" (formula "3") (term "1,1"))
(rule "applyOnRigidTerm" (formula "7") (term "1"))
(rule "simplifyUpdate1" (formula "7") (term "2,1"))
(rule "simplifyUpdate1" (formula "7") (term "1,1"))
(rule "applyOnPV" (formula "7") (term "0,1"))
(rule "applyOnRigidTerm" (formula "6") (term "0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0"))
(rule "applyOnPV" (formula "6") (term "0,0"))
(rule "applyOnRigidTerm" (formula "14") (term "0"))
(rule "simplifyUpdate1" (formula "14") (term "2,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0"))
(rule "simplifyUpdate1" (formula "14") (term "0,0"))
(rule "applyOnPV" (formula "14") (term "1,0"))
(rule "applyOnPV" (formula "14") (term "0,0"))
(rule "selectCreatedOfAnonAsFormula" (formula "14"))
(rule "applyOnRigidTerm" (formula "10") (term "0,1"))
(rule "simplifyUpdate1" (formula "10") (term "2,0,1"))
(rule "simplifyUpdate1" (formula "10") (term "1,0,1"))
(rule "simplifyUpdate1" (formula "10") (term "0,0,1"))
(rule "applyOnPV" (formula "10") (term "1,0,1"))
(rule "applyOnPV" (formula "10") (term "0,0,1"))
(rule "selectCreatedOfAnonAsFormula" (formula "10") (term "1"))
(rule "applyOnRigidTerm" (formula "11") (term "0"))
(rule "simplifyUpdate1" (formula "11") (term "2,0"))
(rule "simplifyUpdate1" (formula "11") (term "1,0"))
(rule "simplifyUpdate1" (formula "11") (term "0,0"))
(rule "applyOnPV" (formula "11") (term "1,0"))
(rule "applyOnPV" (formula "11") (term "0,0"))
(rule "selectCreatedOfAnonAsFormula" (formula "11"))
(rule "applyOnRigidFormula" (formula "21") (term "1,0"))
(rule "simplifyUpdate2" (formula "21") (term "0,1,0"))
(rule "applyOnRigidFormula" (formula "21") (term "0,0"))
(rule "simplifyUpdate2" (formula "21") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "applyOnRigidTerm" (formula "3") (term "0,1"))
(rule "applyOnPV" (formula "3") (term "0,0,1"))
(rule "applyOnRigidFormula" (formula "21") (term "1,1,0"))
(rule "simplifyUpdate1" (formula "21") (term "0,1,1,0"))
(rule "simplifyUpdate1" (formula "21") (term "1,1,1,0"))
(rule "applyOnPV" (formula "21") (term "1,1,1,0"))
(rule "applyOnRigidFormula" (formula "21") (term "1,0,0"))
(rule "simplifyUpdate1" (formula "21") (term "0,1,0,0"))
(rule "applyOnRigidTerm" (formula "21") (term "0,1,1,0"))
(rule "simplifyUpdate1" (formula "21") (term "0,0,1,1,0"))
(rule "simplifyUpdate1" (formula "21") (term "2,0,1,1,0"))
(rule "simplifyUpdate1" (formula "21") (term "1,0,1,1,0"))
(rule "applyOnPV" (formula "21") (term "0,0,1,1,0"))
(rule "applyOnPV" (formula "21") (term "1,0,1,1,0"))
(rule "applyOnRigidTerm" (formula "21") (term "1,1,0,0"))
(rule "simplifyUpdate1" (formula "21") (term "1,1,1,0,0"))
(rule "applyOnRigidTerm" (formula "21") (term "0,1,1,0,0"))
(rule "applyOnPV" (formula "21") (term "0,0,1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "exc#10_1"))
(rule "assignment" (formula "23") (term "1"))
(rule "sequentialToParallel2" (formula "23"))
(rule "simplifyUpdate3" (formula "23") (term "1,0"))
(rule "elementOfUnion" (formula "23") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "23") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "23") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "23") (term "1,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "23") (term "0,0,0,0,0,0,1,0,1"))
(rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=java_util_VerifiedIdentityHashMap_modCount_0"))
(rule "simplifySelectOfAnon" (formula "8"))
(rule "replaceKnownSelect_taclet_0" (formula "7") (term "0"))
(rule "replaceKnownSelect_taclet_0" (formula "6") (term "0"))
(rule "elementOfFreshLocs" (formula "8") (term "1,0,0"))
(rule "elementOfAllLocs" (formula "8") (term "0,0,0,0"))
(rule "concrete_and_1" (formula "8") (term "0,0,0"))
(rule "equalUnique" (formula "8") (term "0,0,0,0"))
(rule "concrete_not_2" (formula "8") (term "0,0,0"))
(rule "concrete_or_1" (formula "8") (term "0,0"))
(rule "ifthenelse_true" (formula "8") (term "0"))
(rule "hideAuxiliaryEq" (formula "8"))
(rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "6") (term "0"))
(rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "8") (term "0"))
(rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "7") (term "0"))
(rule "expand_subJint" (formula "3") (term "1"))
(rule "polySimp_elimSub" (formula "3") (term "0,1"))
(rule "mul_literals" (formula "3") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "3") (term "0,1"))
(rule "expand_subJint" (formula "21") (term "1,1,0,0"))
(rule "polySimp_elimSub" (formula "21") (term "0,1,1,0,0"))
(rule "mul_literals" (formula "21") (term "1,0,1,1,0,0"))
(rule "polySimp_addComm0" (formula "21") (term "0,1,1,0,0"))
(rule "expand_addJint" (formula "23") (term "0,2,0,1,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "23") (term "0,0,2,0,1,0,1,0,0,1"))
(rule "expand_addJint" (formula "23") (term "0,1,1,1,0,0,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "23") (term "0,0,1,1,1,0,0,0,0,1,0,1"))
(rule "expand_moduloInteger" (formula "3") (term "1"))
(rule "replace_int_RANGE" (formula "3") (term "1,1,1"))
(rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,1"))
(rule "replace_int_MIN" (formula "3") (term "0,1"))
(rule "polySimp_addAssoc" (formula "3") (term "0,1,1"))
(rule "add_literals" (formula "3") (term "0,0,1,1"))
(rule "expand_moduloInteger" (formula "21") (term "1,1,0,0"))
(rule "replace_int_HALFRANGE" (formula "21") (term "0,0,1,1,1,0,0"))
(rule "replace_int_RANGE" (formula "21") (term "1,1,1,1,0,0"))
(rule "replace_int_MIN" (formula "21") (term "0,1,1,0,0"))
(rule "polySimp_addAssoc" (formula "21") (term "0,1,1,1,0,0"))
(rule "add_literals" (formula "21") (term "0,0,1,1,1,0,0"))
(rule "expand_moduloInteger" (formula "23") (term "0,2,0,1,0,1,0,0,1"))
(rule "replace_int_MIN" (formula "23") (term "0,0,2,0,1,0,1,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0,2,0,1,0,1,0,0,1"))
(rule "replace_int_RANGE" (formula "23") (term "1,1,0,2,0,1,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "23") (term "0,1,0,2,0,1,0,1,0,0,1"))
(rule "add_literals" (formula "23") (term "0,0,1,0,2,0,1,0,1,0,0,1"))
(rule "expand_moduloInteger" (formula "23") (term "0,1,1,1,0,0,0,0,1,0,1"))
(rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
(rule "replace_int_MIN" (formula "23") (term "0,0,1,1,1,0,0,0,0,1,0,1"))
(rule "replace_int_RANGE" (formula "23") (term "1,1,0,1,1,1,0,0,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1,1,1,0,0,0,0,1,0,1"))
(rule "add_literals" (formula "23") (term "0,0,1,0,1,1,1,0,0,0,0,1,0,1"))
(rule "shift_paren_or" (formula "10"))
(rule "postincrement_attribute" (formula "23") (term "1") (inst "#v=v"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "v"))
(rule "assignment" (formula "23") (term "1"))
(rule "sequentialToParallel2" (formula "23"))
(rule "simplifyUpdate3" (formula "23") (term "1,0"))
(rule "eval_order_access4" (formula "23") (term "1") (inst "#v1=x") (inst "#v0=v_1"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "v_1"))
(rule "assignment" (formula "23") (term "1"))
(rule "sequentialToParallel2" (formula "23"))
(rule "simplifyUpdate3" (formula "23") (term "1,0"))
(rule "applyOnElementary" (formula "23") (term "1,0"))
(rule "applyOnPV" (formula "23") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x"))
(rule "compound_int_cast_expression" (formula "23") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_1"))
(rule "remove_parentheses_right" (formula "23") (term "1"))
(rule "compound_addition_1" (formula "23") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_2"))
(rule "assignment_read_attribute" (formula "23"))
(branch "Normal Execution (v != null)"
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
   (rule "replaceKnownSelect_taclet_0" (formula "23") (term "0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "23") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "23") (term "1"))
   (rule "translateJavaAddInt" (formula "23") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
   (rule "expand_addJint" (formula "23") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "23") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "23") (term "0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0,1,0"))
   (rule "replace_int_RANGE" (formula "23") (term "1,1,0,1,0"))
   (rule "replace_int_MIN" (formula "23") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "23") (term "0,0,1,0,1,0"))
   (rule "widening_identity_cast_5" (formula "23") (term "1"))
   (rule "assignment" (formula "23") (term "1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0"))
   (rule "assignment_write_attribute" (formula "23"))
   (branch "Normal Execution (v_1 != null)"
      (rule "sequentialToParallel2" (formula "23"))
      (rule "simplifyUpdate2" (formula "23"))
      (rule "simplifyUpdate3" (formula "23") (term "1,0"))
      (rule "applyOnElementary" (formula "23") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
      (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "23") (term "3,0,1,0"))
      (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
      (rule "assignment_to_reference_array_component" (formula "23"))
      (branch "Normal Execution (tab != null)"
         (rule "sequentialToParallel2" (formula "23"))
         (rule "simplifyUpdate2" (formula "23"))
         (rule "simplifyUpdate3" (formula "23") (term "1,0"))
         (rule "applyOnElementary" (formula "23") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "3,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,2,0,1,0"))
         (rule "eval_order_array_access2" (formula "23") (term "1") (inst "#v0=x") (inst "#ar1=o_arr"))
         (rule "variableDeclarationAssign" (formula "23") (term "1"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "o_arr"))
         (rule "assignment" (formula "23") (term "1"))
         (rule "sequentialToParallel2" (formula "23"))
         (rule "simplifyUpdate3" (formula "23") (term "1,0"))
         (rule "applyOnElementary" (formula "23") (term "1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "23") (term "1"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_3"))
         (rule "assignmentAdditionInt" (formula "23") (term "1"))
         (rule "translateJavaAddInt" (formula "23") (term "0,0,1"))
         (rule "sequentialToParallel2" (formula "23"))
         (rule "simplifyUpdate3" (formula "23") (term "1,0"))
         (rule "applyOnElementary" (formula "23") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
         (rule "assignment_to_reference_array_component" (formula "23"))
         (branch "Normal Execution (o_arr != null)"
            (rule "sequentialToParallel2" (formula "23"))
            (rule "simplifyUpdate2" (formula "23"))
            (rule "simplifyUpdate3" (formula "23") (term "1,0"))
            (rule "applyOnElementary" (formula "23") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "23") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "23") (term "0,2,0,1,0"))
            (rule "expand_addJint" (formula "23") (term "0,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "23") (term "0,0,2,0,1,0"))
            (rule "expand_moduloInteger" (formula "23") (term "0,2,0,1,0"))
            (rule "replace_int_RANGE" (formula "23") (term "1,1,0,2,0,1,0"))
            (rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0,2,0,1,0"))
            (rule "replace_int_MIN" (formula "23") (term "0,0,2,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,2,0,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,2,0,1,0"))
            (rule "tryEmpty" (formula "23") (term "1"))
            (rule "blockEmptyLabel" (formula "23") (term "1"))
            (rule "blockEmpty" (formula "23") (term "1"))
            (rule "methodCallEmpty" (formula "23") (term "1"))
            (rule "emptyModality" (formula "23") (term "1"))
            (rule "applyOnRigidFormula" (formula "23"))
            (rule "simplifyUpdate2" (formula "23") (term "1"))
            (rule "simplifyUpdate2" (formula "23") (term "0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0"))
            (rule "simplifyUpdate2" (formula "23") (term "1,0"))
            (rule "simplifyUpdate2" (formula "23") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
            (rule "simplifyUpdate2" (formula "23") (term "1,1,0"))
            (rule "simplifyUpdate2" (formula "23") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,0"))
            (rule "eqClose" (formula "23") (term "0,0"))
            (rule "concrete_and_1" (formula "23") (term "0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "1,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
            (rule "simplifyUpdate2" (formula "23") (term "1,0,0"))
            (rule "simplifyUpdate2" (formula "23") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
            (rule "simplifyUpdate2" (formula "23") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "1,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0"))
            (rule "applyOnPV" (formula "23") (term "1,1,0,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,0,0"))
            (rule "applyOnPV" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,1"))
            (rule "eqSymm" (formula "23") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "0,1,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0,0"))
            (rule "applyOnPV" (formula "23") (term "1,0,1,0,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,0,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,0,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,0,0,0"))
            (rule "applyOnPV" (formula "23") (term "1,0,0,0,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,1,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "1,1,0,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "0,1,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "2,0,0,0,0"))
            (rule "applyOnPV" (formula "23") (term "0,2,0,0,0,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,0"))
            (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,0,0,1,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0,1,0"))
            (rule "eqSymm" (formula "23") (term "0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,1,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,1,0"))
            (rule "applyOnPV" (formula "23") (term "0,0,1,1,1,0"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,1,1,1,0"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "1,1,0,0,0,0,0,1"))
            (rule "simplifyUpdate2" (formula "23") (term "0,1,0,0,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,1,1,0,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0,0,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "1,0,1,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,2,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,2,0,1,0,0"))
            (rule "dismissNonSelectedField" (formula "23") (term "0,0,0,1,0"))
            (rule "dismissNonSelectedField" (formula "23") (term "0,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "23") (term "0,1,1,1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,1,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,1,0,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "0,0,0,1,1,0,0,0,1"))
            (rule "selectCreatedOfAnonAsFormula" (formula "23") (term "0,1,1,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0,1,1,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0,1,1,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,1,1,0,0,0,0,0,1"))
            (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0,0,0,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "1,0,1,0,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "1,0,2,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,0,2,0,1,0,0"))
            (rule "dismissNonSelectedField" (formula "23") (term "0,0,0,1,0"))
            (rule "dismissNonSelectedField" (formula "23") (term "0,0,1,1,0"))
            (rule "dismissNonSelectedField" (formula "23") (term "0,1,1,1,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,1,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,1,1,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,2,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0,2,0,1,0,0"))
            (rule "applyOnPV" (formula "23") (term "1,0,1,0,2,0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,1,1,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,1,1,0,0,0,0,1"))
            (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,1,1,1,0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0,1,1,1,0,0,0,0,1"))
            (rule "applyOnPV" (formula "23") (term "1,0,1,0,1,1,1,0,0,0,0,1"))
            (rule "applyEq" (formula "23") (term "1,0,1,3,0,0,0,0,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "8"))
            (rule "applyEq" (formula "23") (term "1,0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "8"))
            (rule "applyEq" (formula "23") (term "1,0,1,3,0,0,1,1,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "23") (term "1,0,1,3,0,0,0,0,0,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "23") (term "1,0,1,3,0,0,0,0,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "23") (term "1,0,1,3,0,0,0,1,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
            (rule "jmod_axiom" (formula "21") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,1,0"))
            (rule "jmod_axiom" (formula "4") (term "0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
            (rule "mod_axiom" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,1,0,0"))
            (rule "mod_axiom" (formula "3") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
            (rule "mul_literals" (formula "3") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,2,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,2,0,0,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,2,0,0,1,0,0,1"))
            (rule "mod_axiom" (formula "23") (term "1,0,2,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,2,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,2,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,2,0,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,2,0,0,1,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,0,2,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,2,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,2,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,2,0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,2,0,0,0,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,0,2,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,2,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,2,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,2,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,2,0,1,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,1,0,0,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,1,1,0,0,0,0,1"))
            (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0,1,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0,1,0,0,1"))
            (rule "mod_axiom" (formula "23") (term "1,3,0,0,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,1,1,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,3,0,0,1,1,1,0"))
            (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0,0,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0,1,0"))
            (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,1,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,1,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "21") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
            (rule "polySimp_rightDist" (formula "3") (term "0,1"))
            (rule "mul_literals" (formula "3") (term "0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
            (rule "leq_literals" (formula "13") (term "0"))
            (rule "concrete_or_1" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,3,0,0,0,1,1,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,2,0,1,3,0,0,0,1,1,0"))
            (rule "equal_literals" (formula "22") (term "0,0,1,3,0,0,0,1,1,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,3,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,3,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,3,0,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,3,0,0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,3,0,0,0,1,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,3,0,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,3,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,3,0,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "3,0,0,0,1,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,3,0,0,0,1,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,3,0,0,0,1,1,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,3,0,0,0,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "equal_literals" (formula "22") (term "0,0,1,3,0,0,0,0,1,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,3,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,3,0,0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,3,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,3,0,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,3,0,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,3,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,3,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "3,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,3,0,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,3,0,0,0,0,1,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,3,0,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "equal_literals" (formula "22") (term "0,0,1,3,0,0,0,0,0,0,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1,3,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,3,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,3,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "3,0,0,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,3,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,3,0,0,0,0,0,0,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,3,0,0,1,1,1,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,1,3,0,0,1,1,1,0"))
            (rule "equal_literals" (formula "22") (term "0,0,1,3,0,0,1,1,1,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,3,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,3,0,0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,3,0,0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,3,0,0,1,1,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,3,0,0,1,1,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,3,0,0,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,3,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,3,0,0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "3,0,0,1,1,1,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,3,0,0,1,1,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,3,0,0,1,1,1,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,2,0,1,3,0,0,0,0,1,0,0,1"))
            (rule "equal_literals" (formula "22") (term "0,0,1,3,0,0,0,0,1,0,0,1"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,3,0,0,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,3,0,0,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,3,0,0,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "3,0,0,0,0,1,0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,3,0,0,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,3,0,0,0,0,1,0,0,1"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,3,0,0,0,0,1,0,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "equal_literals" (formula "22") (term "0,0,1,3,0,0,0,0,1,0,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1,3,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,3,0,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,3,0,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "3,0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,3,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,3,0,0,0,0,1,0,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,0,1,1,1,0,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
            (rule "equal_literals" (formula "22") (term "0,0,1,0,1,1,1,0,0,0,0,1"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,1,0,1,1,1,0,0,0,0,1"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,0,1,1,1,0,0,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1,1,1,0,0,0,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1,1,1,0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1,1,0,0,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,1,0,0,0,0,1"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,0,2,0,1,0,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,1,0,2,0,1,0,0"))
            (rule "equal_literals" (formula "22") (term "0,0,1,0,2,0,1,0,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,0,2,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,2,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,2,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1,0,2,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,0,2,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,2,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,2,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,2,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,2,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,2,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,2,0,1,0,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,0,2,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,1,0,2,0,0,0,0,0"))
            (rule "equal_literals" (formula "22") (term "0,0,1,0,2,0,0,0,0,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,0,2,0,0,0,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,2,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,2,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1,0,2,0,0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,0,2,0,0,0,0,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,2,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,2,0,0,0,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,2,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,2,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,2,0,0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,2,0,0,0,0,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,0,2,0,0,1,0,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,2,0,1,0,2,0,0,1,0,0"))
            (rule "equal_literals" (formula "22") (term "0,0,1,0,2,0,0,1,0,0"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,0,2,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,2,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,2,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,2,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,0,2,0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,0,2,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,2,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,2,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,2,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,2,0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,2,0,0,1,0,0"))
            (rule "polyDiv_pullOut" (formula "22") (term "0,1,0,2,0,0,1,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
            (rule "equal_literals" (formula "22") (term "0,0,1,0,2,0,0,1,0,0,1"))
            (rule "ifthenelse_false" (formula "22") (term "0,1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,1,0,2,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_addComm0" (formula "22") (term "1,1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,1,1,1,0,2,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,1,1,1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,2,0,0,1,0,0,1"))
            (rule "mul_literals" (formula "22") (term "0,1,0,2,0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,2,0,0,1,0,0,1"))
            (rule "polySimp_addComm1" (formula "22") (term "0,0,2,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,0,2,0,0,1,0,0,1"))
            (rule "pullOutSelect" (formula "22") (term "0,0,1,1,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_modCount_1"))
            (rule "applyEq" (formula "23") (term "0,1,1,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "23") (term "0,0,0,1,0") (ifseqformula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "replaceKnownSelect_taclet_0" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "1") (term "2,0"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "23") (term "0,0,1,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "23") (term "0,0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "polySimp_homoEq" (formula "22") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "0,0,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "22") (term "0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,1,1,0"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "0,1,0,1,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,0,1,0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,1,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,1,1,0"))
            (rule "polySimp_sepPosMonomial" (formula "22") (term "0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,1,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,1,1,1,1,0"))
            (rule "elimGcdEq" (formula "22") (term "0,0,1,0") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        int::select(heap,
                    self,
                    java.util.VerifiedIdentityHashMap::$modCount)),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "eqClose" (formula "22") (term "0,0,0,0,0,1,0"))
            (rule "concrete_and_1" (formula "22") (term "0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "1,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "0,1,0,0,0,1,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,0,1,0"))
            (rule "equal_literals" (formula "22") (term "0,1,0,0,1,0"))
            (rule "concrete_and_2" (formula "22") (term "1,0,0,1,0"))
            (rule "qeq_literals" (formula "22") (term "1,0,0,0,1,0"))
            (rule "concrete_and_3" (formula "22") (term "0,0,0,1,0"))
            (rule "leq_literals" (formula "22") (term "0,0,0,1,0"))
            (rule "ifthenelse_true_for" (formula "22") (term "0,0,1,0"))
            (rule "concrete_not_2" (formula "22") (term "0,1,0"))
            (rule "concrete_and_1" (formula "22") (term "1,0"))
            (rule "newSym_eq" (formula "4") (inst "l=l_0") (inst "newSymDef=mul(anonIn_i, Z(0(#)))"))
            (rule "times_zero_1" (formula "4") (term "1,1"))
            (rule "add_zero_right" (formula "4") (term "1"))
            (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "4"))
            (rule "eqSymm" (formula "5"))
            (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "0,2,0,0,0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "1,0,0,1,0,2,0,0,1,0,0,1") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "0,2,0,0,0,0,0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "1,0,0,1,0,2,0,0,1,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "23") (term "1,0,0,1,0,2,0,0,0,0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "0,2,0,0,0,1,0,0,1") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "0,2,0,0,0,1,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "23") (term "1,0,0,1,0,2,0,1,0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "5"))
            (rule "applyEq" (formula "23") (term "1,0,0,1,0,1,1,1,0,0,0,0,1") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "1,0,0,2,0,0,1,0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "0,1,1,1,0,0,0,0,0,1") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "23") (term "1,0,0,2,0,0,1,0,0,1") (ifseqformula "5"))
            (rule "applyEq" (formula "23") (term "1,0,0,2,0,0,0,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "23") (term "1,0,0,2,0,1,0,0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "3") (term "0,1,0,1") (ifseqformula "5"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
            (rule "applyEq" (formula "23") (term "1,0,0,1,1,1,0,0,0,0,1") (ifseqformula "5"))
            (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "13") (term "0,0"))
            (rule "concrete_or_2" (formula "13") (term "0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
            (rule "neg_literal" (formula "13") (term "0,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0"))
            (rule "qeq_literals" (formula "13") (term "0"))
            (rule "concrete_or_2" (formula "13"))
            (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
            (rule "concrete_or_2" (formula "2") (term "0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_or_2" (formula "2"))
            (rule "pullOutSelect" (formula "23") (term "0,0,0,0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "1,0,0,0"))
            (rule "eqClose" (formula "1") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0,0"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "polySimp_homoEq" (formula "1") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_sepPosMonomial" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "elimGcdEq" (formula "1") (term "0,0") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        mul(l_0, Z(2(#)))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "eqClose" (formula "1") (term "0,0,0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "equal_literals" (formula "1") (term "0,1,0,0"))
            (rule "concrete_and_2" (formula "1") (term "1,0,0"))
            (rule "qeq_literals" (formula "1") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0,0"))
            (rule "ifthenelse_true_for" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "eqClose" (formula "1") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0,0"))
            (rule "eqClose" (formula "1") (term "0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0"))
            (rule "equalUnique" (formula "1") (term "0,0,0"))
            (rule "concrete_not_2" (formula "1") (term "0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "24") (term "0,0,0,0") (ifseqformula "1"))
            (rule "eqClose" (formula "24") (term "0,0,0"))
            (rule "concrete_and_1" (formula "24") (term "0,0"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "23") (term "0,0,0") (inst "selectSK=arr_1"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "eqClose" (formula "1") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0,0"))
            (rule "eqClose" (formula "1") (term "0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0"))
            (rule "equalUnique" (formula "1") (term "0,0,0"))
            (rule "concrete_not_2" (formula "1") (term "0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "1"))
            (rule "eqClose" (formula "24") (term "0,0"))
            (rule "concrete_and_1" (formula "24") (term "0"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "nnf_notOr" (formula "23") (term "1,1,0,0,0,1"))
            (rule "nnf_ex2all" (formula "21"))
            (rule "cut_direct" (formula "12") (term "0,0"))
            (branch "CUT: anonIn_value = null TRUE"
               (rule "concrete_or_1" (formula "13") (term "0"))
               (rule "concrete_or_1" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEq" (formula "23") (term "3,0,0,1,0,0,1") (ifseqformula "12"))
               (rule "cut_direct" (formula "16") (term "0"))
               (branch "CUT: self.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "cut_direct" (formula "13") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "26") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "29") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                        (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "29") (term "0"))
                        (rule "applyEq" (formula "29") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "29") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                        (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "29"))
                        (rule "allRight" (formula "29") (inst "sk=f_0"))
                        (rule "allRight" (formula "29") (inst "sk=o_0"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "pullOutSelect" (formula "33") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet00000000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "35"))
                        (rule "closeTrue" (formula "35"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "27") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                        (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "30") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "30") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "30"))
                        (rule "allRight" (formula "30") (inst "sk=f_0"))
                        (rule "allRight" (formula "30") (inst "sk=o_0"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet10000000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "36"))
                        (rule "closeTrue" (formula "36"))
                     )
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "13"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "27") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                        (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "30") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "30") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "30"))
                        (rule "allRight" (formula "30") (inst "sk=f_0"))
                        (rule "allRight" (formula "30") (inst "sk=o_0"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "35"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "35") (ifseqformula "1"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "28") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "31") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=f_0"))
                        (rule "allRight" (formula "31") (inst "sk=o_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "pullOutSelect" (formula "35") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet11000000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "37"))
                        (rule "closeTrue" (formula "37"))
                     )
                  )
               )
               (branch "CUT: self.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "16"))
                  (rule "cut_direct" (formula "13") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "27") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                        (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "30") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "30") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "30"))
                        (rule "allRight" (formula "30") (inst "sk=f_0"))
                        (rule "allRight" (formula "30") (inst "sk=o_0"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "34") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet00100000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "36"))
                        (rule "closeTrue" (formula "36"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "28") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "31") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=f_0"))
                        (rule "allRight" (formula "31") (inst "sk=o_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "13"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "28") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "31") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=f_0"))
                        (rule "allRight" (formula "31") (inst "sk=o_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "29") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                        (rule "replace_known_left" (formula "32") (term "1,0") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "32") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "32"))
                        (rule "allRight" (formula "32") (inst "sk=f_0"))
                        (rule "allRight" (formula "32") (inst "sk=o_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "37"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "37") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "CUT: anonIn_value = null FALSE"
               (rule "concrete_or_2" (formula "12") (term "0"))
               (rule "cut_direct" (formula "16") (term "0"))
               (branch "CUT: self.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "cut_direct" (formula "13") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "27") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                        (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "30") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "30") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "30"))
                        (rule "allRight" (formula "30") (inst "sk=f_0"))
                        (rule "allRight" (formula "30") (inst "sk=o_0"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "35"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "35") (ifseqformula "1"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "28") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                        (rule "replace_known_left" (formula "31") (term "1,0") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "31") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=f_0"))
                        (rule "allRight" (formula "31") (inst "sk=o_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "13"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "28") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "31") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=f_0"))
                        (rule "allRight" (formula "31") (inst "sk=o_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "29") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                        (rule "replace_known_left" (formula "32") (term "1,0") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "32") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "32"))
                        (rule "allRight" (formula "32") (inst "sk=f_0"))
                        (rule "allRight" (formula "32") (inst "sk=o_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "36") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet11010000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "38"))
                        (rule "closeTrue" (formula "38"))
                     )
                  )
               )
               (branch "CUT: self.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "16"))
                  (rule "cut_direct" (formula "13") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "28") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,1,0"))
                        (rule "replace_known_left" (formula "31") (term "1,0") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "31") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "31") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "31") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=f_0"))
                        (rule "allRight" (formula "31") (inst "sk=o_0"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "36"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "29") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                        (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "32") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "32"))
                        (rule "allRight" (formula "32") (inst "sk=f_0"))
                        (rule "allRight" (formula "32") (inst "sk=o_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "36") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet10110000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "38"))
                        (rule "closeTrue" (formula "38"))
                     )
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "13"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "29") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                        (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "32") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "32") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "2"))
                        (rule "concrete_and_1" (formula "32"))
                        (rule "allRight" (formula "32") (inst "sk=f_0"))
                        (rule "allRight" (formula "32") (inst "sk=o_0"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "36") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                        (rule "elementOfAllLocs" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "replaceKnownSelect_taclet01110000_9" (formula "1") (term "2,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                        (rule "eqClose" (formula "38"))
                        (rule "closeTrue" (formula "38"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "15"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "1,0"))
                        (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "equal_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "6"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "18"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "div_axiom" (formula "30") (term "0,1,3,0,0,0,0,1,0,0,1") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                        (rule "add_literals" (formula "3") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "33") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,1,0"))
                        (rule "replace_known_left" (formula "33") (term "1,0") (ifseqformula "2"))
                        (rule "concrete_and_3" (formula "33") (term "0"))
                        (rule "applyEq" (formula "33") (term "0,1,3,0,0,0,0,1,0,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm1" (formula "33") (term "3,0,0,0,0,1,0,0,1"))
                        (rule "applyEq" (formula "33") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "33") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                        (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "3"))
                        (rule "concrete_and_1" (formula "33"))
                        (rule "allRight" (formula "33") (inst "sk=f_0"))
                        (rule "allRight" (formula "33") (inst "sk=o_0"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "38"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "close" (formula "38") (ifseqformula "1"))
                     )
                  )
               )
            )
         )
         (branch "Null Reference (o_arr = null)"
            (rule "false_right" (formula "24"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "close" (formula "20") (ifseqformula "1"))
         )
         (branch "Index Out of Bounds (o_arr != null, but x_3 Out of Bounds!)"
            (rule "false_right" (formula "24"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "20"))
            (rule "applyOnPV" (formula "20") (term "0"))
            (rule "simplifyUpdate1" (formula "20") (term "1"))
            (rule "applyOnRigidFormula" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "simplifyUpdate1" (formula "1") (term "0,0"))
            (rule "applyOnPV" (formula "1") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0,1"))
            (rule "simplifyUpdate1" (formula "1") (term "1,1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "9"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
            (rule "jmod_axiom" (formula "22") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,1,0"))
            (rule "jmod_axiom" (formula "5") (term "0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
            (rule "mod_axiom" (formula "4") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
            (rule "mul_literals" (formula "4") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,0"))
            (rule "mod_axiom" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "22") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0"))
            (rule "polySimp_sepNegMonomial" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "polySimp_rightDist" (formula "4") (term "0,1"))
            (rule "mul_literals" (formula "4") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "1,0,1,1,0,0"))
            (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "3"))
            (rule "leq_literals" (formula "14") (term "0"))
            (rule "concrete_or_1" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "newSym_eq" (formula "5") (inst "l=l_0") (inst "newSymDef=mul(anonIn_i, Z(0(#)))"))
            (rule "times_zero_1" (formula "5") (term "1,1"))
            (rule "add_zero_right" (formula "5") (term "1"))
            (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "5"))
            (rule "eqSymm" (formula "6"))
            (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "6"))
            (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "6"))
            (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "6"))
            (rule "applyEqRigid" (formula "4") (term "0,1,0,1") (ifseqformula "6"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
            (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "3") (term "0,0"))
            (rule "concrete_or_2" (formula "3") (term "0"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "leq_literals" (formula "3") (term "0"))
            (rule "concrete_or_2" (formula "3"))
            (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
            (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "14") (term "0,0"))
            (rule "concrete_or_2" (formula "14") (term "0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
            (rule "add_literals" (formula "14") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0"))
            (rule "qeq_literals" (formula "14") (term "0"))
            (rule "concrete_or_2" (formula "14"))
            (rule "nnf_ex2all" (formula "22"))
            (rule "expand_addJint" (formula "2") (term "1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
            (rule "expand_addJint" (formula "2") (term "0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
            (rule "expand_moduloInteger" (formula "2") (term "1,0"))
            (rule "replace_int_RANGE" (formula "2") (term "1,1,1,0"))
            (rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,1,0"))
            (rule "replace_int_MIN" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1,1,0"))
            (rule "add_literals" (formula "2") (term "0,0,1,1,0"))
            (rule "mod_axiom" (formula "2") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
            (rule "add_literals" (formula "2") (term "0,0,1,0"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,1,1,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,1,1,0"))
            (rule "equal_literals" (formula "2") (term "0,0,1,1,0"))
            (rule "ifthenelse_false" (formula "2") (term "0,1,1,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,1,1,1,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
            (rule "add_literals" (formula "2") (term "0,0,1,0"))
            (rule "expand_moduloInteger" (formula "2") (term "0,1"))
            (rule "replace_int_MIN" (formula "2") (term "0,0,1"))
            (rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,0,1"))
            (rule "replace_int_RANGE" (formula "2") (term "1,1,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,1,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
            (rule "add_literals" (formula "2") (term "0,0,1"))
            (rule "mod_axiom" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,1"))
            (rule "mul_literals" (formula "2") (term "0,0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1"))
            (rule "elimGcdGeq" (formula "2") (term "1") (inst "elimGcdRightDiv=add(Z(1(#)), l_0)") (inst "elimGcdLeftDiv=mul(div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
            mul(l_0, Z(2(#)))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(8(4(6(3(8(4(7(4(1(2(#))))))))))))") (inst "elimGcd=Z(2(#))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,1,0,1"))
            (rule "mul_literals" (formula "2") (term "0,0,0,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0,0,1"))
            (rule "sub_literals" (formula "2") (term "0,0,0,0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,1,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,1,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,1,0,1"))
            (rule "add_zero_right" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0,1,0,1"))
            (rule "mul_literals" (formula "2") (term "0,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,0,1"))
            (rule "add_zero_left" (formula "2") (term "0,0,1,0,1"))
            (rule "polySimp_pullOutFactor0" (formula "2") (term "0,1,0,1"))
            (rule "add_literals" (formula "2") (term "1,0,1,0,1"))
            (rule "times_zero_1" (formula "2") (term "0,1,0,1"))
            (rule "leq_literals" (formula "2") (term "1,0,1"))
            (rule "concrete_and_3" (formula "2") (term "0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,1"))
            (rule "qeq_literals" (formula "2") (term "0,1"))
            (rule "ifthenelse_true_for" (formula "2") (term "1"))
            (rule "polyDiv_pullOut" (formula "2") (term "0,0,1") (inst "polyDivCoeff=Z(1(#))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,0,1"))
            (rule "equal_literals" (formula "2") (term "0,0,0,1"))
            (rule "ifthenelse_false" (formula "2") (term "0,0,1"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "0,1"))
            (rule "mul_literals" (formula "2") (term "0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,1"))
            (rule "mul_literals" (formula "2") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
            (rule "commute_or" (formula "2"))
            (rule "commute_or" (formula "1") (term "1,0"))
            (rule "shift_paren_or" (formula "1") (term "0"))
            (rule "commute_or_2" (formula "1") (term "0,0"))
            (rule "div_axiom" (formula "5") (term "0,0") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "5") (term "0"))
            (rule "concrete_or_2" (formula "5"))
            (rule "qeq_literals" (formula "5") (term "0,1"))
            (rule "ifthenelse_true_for" (formula "5") (term "1"))
            (rule "mul_literals" (formula "5") (term "1,1,1"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
            (rule "add_literals" (formula "7") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "7") (term "1"))
            (rule "add_literals" (formula "7") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq0" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0"))
            (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "5"))
            (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
            (rule "mul_literals" (formula "7") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1"))
            (rule "polySimp_rightDist" (formula "8") (term "1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
            (rule "polySimp_rightDist" (formula "8") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1"))
            (rule "mul_literals" (formula "8") (term "0,0,1"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0"))
            (rule "polySimp_rightDist" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "19"))
            (rule "mul_literals" (formula "8") (term "0,1,0"))
            (rule "greater_literals" (formula "8") (term "0,0"))
            (rule "concrete_and_1" (formula "8") (term "0"))
            (rule "leq_literals" (formula "8") (term "0"))
            (rule "concrete_or_1" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "commute_or" (formula "1") (term "0,0,0"))
            (rule "jdiv_axiom" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0,2,1"))
            (rule "eqSymm" (formula "9"))
            (rule "applyEq" (formula "9") (term "1") (ifseqformula "10"))
            (rule "inEqSimp_subsumption6" (formula "9") (term "0,0") (ifseqformula "4"))
            (rule "times_zero_1" (formula "9") (term "1,1,0,0,0"))
            (rule "greater_literals" (formula "9") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "9") (term "0,0,0"))
            (rule "leq_literals" (formula "9") (term "0,0,0"))
            (rule "concrete_or_1" (formula "9") (term "0,0"))
            (rule "ifthenelse_true" (formula "9") (term "0"))
            (rule "polyDiv_pullOut" (formula "9") (term "0") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,2,0"))
            (rule "equal_literals" (formula "9") (term "0,0"))
            (rule "ifthenelse_false" (formula "9") (term "0"))
            (rule "polySimp_homoEq" (formula "9"))
            (rule "polySimp_pullOutFactor0" (formula "9") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "9") (term "1,0,0,0,1,0"))
            (rule "times_zero_1" (formula "9") (term "0,0,0,1,0"))
            (rule "div_literals" (formula "9") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "9") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "1,0"))
            (rule "times_zero_1" (formula "9") (term "0"))
            (rule "eqClose" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "cut_direct" (formula "16") (term "0,0"))
            (branch "CUT: anonIn_value = null TRUE"
               (rule "concrete_or_1" (formula "17") (term "0"))
               (rule "concrete_or_1" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "cut_direct" (formula "20") (term "0"))
               (branch "CUT: self.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "cut_direct" (formula "17") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "6") (term "0,1,1,0") (ifseqformula "8"))
                        (rule "mul_literals" (formula "6") (term "1,1,0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "6"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEq" (formula "4") (term "0,1,1,0") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,1,0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "17"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "mul_literals" (formula "11") (term "0,1,0"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "6") (term "0,1,1,0") (ifseqformula "8"))
                        (rule "mul_literals" (formula "6") (term "1,1,0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "8") (term "1,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
               )
               (branch "CUT: self.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "20"))
                  (rule "cut_direct" (formula "17") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_2" (formula "7") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "6") (term "0,1,1,0") (ifseqformula "8"))
                        (rule "mul_literals" (formula "6") (term "1,1,0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "add_literals" (formula "5") (term "1"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "0,0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "8") (term "1,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_2" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "add_literals" (formula "5") (term "1"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "4") (term "0,1,1,0") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,1,0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "13"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_impl_1" (formula "7") (term "0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                        (rule "concrete_and_2" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "17"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1,0") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,1,0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "13"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_impl_1" (formula "7") (term "0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                        (rule "concrete_and_2" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,0,0") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "6") (term "0,1,1,0") (ifseqformula "8"))
                        (rule "mul_literals" (formula "6") (term "1,1,0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "7") (term "1,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "13"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_impl_1" (formula "7") (term "0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                        (rule "concrete_and_2" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
               )
            )
            (branch "CUT: anonIn_value = null FALSE"
               (rule "concrete_or_2" (formula "16") (term "0"))
               (rule "cut_direct" (formula "17") (term "0"))
               (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "cut_direct" (formula "20") (term "0"))
                  (branch "CUT: self.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "add_literals" (formula "5") (term "1"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "4") (term "0,1,1,0") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,1,0"))
                        (rule "add_literals" (formula "4") (term "1,0"))
                        (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "mul_literals" (formula "11") (term "0,1,0"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "6"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "times_zero_1" (formula "8") (term "1,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "mul_literals" (formula "11") (term "0,1,0"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
                  (branch "CUT: self.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "20"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_2" (formula "7") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_zero_right" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "add_literals" (formula "5") (term "1"))
                        (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=add(Z(2(8(3(6(1(#)))))),
    mul(quotient_0,
        Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "neg_literal" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "7"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "11") (ifseqformula "14"))
                        (rule "mul_literals" (formula "11") (term "0,1,0"))
                        (rule "greater_literals" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "8") (term "1,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                  )
               )
               (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "17"))
                  (rule "cut_direct" (formula "20") (term "0"))
                  (branch "CUT: self.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "6") (term "0,1,1,0") (ifseqformula "8"))
                        (rule "mul_literals" (formula "6") (term "1,1,0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "qeq_literals" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "add_literals" (formula "5") (term "1"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0"))
                        (rule "expand_inShort" (formula "7"))
                        (rule "replace_short_MIN" (formula "7") (term "0,1"))
                        (rule "replace_short_MAX" (formula "7") (term "1,0"))
                        (rule "andLeft" (formula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "8") (ifseqformula "14"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_impl_1" (formula "8") (term "0"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (rule "concrete_and_2" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "21"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_and_2" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "13"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_impl_1" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                        (rule "concrete_and_2" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
                  (branch "CUT: self.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "20"))
                     (rule "cut_direct" (formula "19") (term "0"))
                     (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1,1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_2" (formula "7") (term "0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "add_literals" (formula "5") (term "1"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "1,1,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "11") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "11") (term "0,0"))
                        (rule "concrete_or_2" (formula "11") (term "0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                        (rule "add_literals" (formula "11") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "11") (term "1,0,0"))
                        (rule "add_literals" (formula "11") (term "0,0"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "mul_literals" (formula "8") (term "0,1,0"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "13"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_impl_1" (formula "7") (term "0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                        (rule "concrete_and_2" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                        (rule "concrete_or_2" (formula "19"))
                        (rule "div_axiom" (formula "2") (term "0,1,1,1") (inst "quotient=quotient_1"))
                        (rule "equal_literals" (formula "2") (term "0"))
                        (rule "concrete_or_2" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,1,1,1"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "ifthenelse_true_for" (formula "2") (term "1"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,1"))
                        (rule "add_literals" (formula "4") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "4") (term "1"))
                        (rule "add_literals" (formula "4") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "applyEq" (formula "5") (term "0,1,1,1") (ifseqformula "2"))
                        (rule "polySimp_addComm1" (formula "5") (term "1,1"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "5") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1"))
                        (rule "polySimp_rightDist" (formula "4") (term "1"))
                        (rule "mul_literals" (formula "4") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0"))
                        (rule "elimGcdLeq_antec" (formula "4") (inst "elimGcdRightDiv=add(Z(1(7(4(5(2(2(1(2(2(3(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                        (rule "neg_literal" (formula "4") (term "0,0,0,0,0,1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "4") (term "0,0"))
                        (rule "concrete_or_2" (formula "4") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                        (rule "concrete_or_2" (formula "4"))
                        (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=add(Z(4(2(8(1(4(7(3(7(0(1(#))))))))))),
    mul(quotient_1, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                        (rule "mul_literals" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "7") (term "0,0"))
                        (rule "concrete_or_2" (formula "7") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
                        (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0"))
                        (rule "add_zero_right" (formula "7") (term "0,0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_2" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_or_2" (formula "3") (term "0"))
                        (rule "neg_literal" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1,0") (ifseqformula "7"))
                        (rule "mul_literals" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "1,0"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
                        (rule "mul_literals" (formula "4") (term "1,1"))
                        (rule "add_literals" (formula "4") (term "1"))
                        (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "4") (term "0,1,0,1,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "4") (term "1,0,1,1"))
                        (rule "add_literals" (formula "4") (term "0,1,1"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "3") (term "0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "1,1,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_addComm1" (formula "10") (term "0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "10") (term "0,0"))
                        (rule "concrete_or_2" (formula "10") (term "0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                        (rule "add_literals" (formula "10") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_2" (formula "10"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=add(Z(neglit(4(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                        (rule "leq_literals" (formula "8") (term "0,0"))
                        (rule "concrete_or_2" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_2" (formula "8"))
                        (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "22"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "inEqSimp_subsumption4" (formula "8") (ifseqformula "12"))
                        (rule "greater_literals" (formula "8") (term "0,0"))
                        (rule "concrete_and_1" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "0,0"))
                        (rule "leq_literals" (formula "8") (term "0"))
                        (rule "concrete_or_1" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_subsumption6" (formula "7") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "7") (term "1,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_and_1" (formula "7") (term "0"))
                        (rule "leq_literals" (formula "7") (term "0"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "11"))
                        (rule "times_zero_1" (formula "7") (term "0,0"))
                        (rule "add_zero_left" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1"))
                        (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "13"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "greater_literals" (formula "7") (term "0,0"))
                        (rule "concrete_impl_1" (formula "7") (term "0"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                        (rule "concrete_and_2" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
               )
            )
         )
         (branch "Array Store Exception (incompatible dynamic element type of o_arr and value)"
            (rule "false_right" (formula "24"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "notLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "22"))
            (rule "simplifyUpdate1" (formula "22") (term "1"))
            (rule "simplifyUpdate1" (formula "22") (term "0"))
            (rule "applyOnPV" (formula "22") (term "1"))
            (rule "applyOnPV" (formula "22") (term "0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "simplifyUpdate1" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "applyOnRigidFormula" (formula "21"))
            (rule "simplifyUpdate1" (formula "21") (term "1"))
            (rule "applyOnPV" (formula "21") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0,1"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
            (rule "array_store_known_dynamic_array_type" (formula "21") (ifseqformula "7"))
            (rule "instanceof_static_type" (formula "21") (term "0,1"))
            (rule "boolean_equal" (formula "21") (term "1"))
            (rule "concrete_or_3" (formula "21"))
            (rule "closeTrue" (formula "21"))
         )
      )
      (branch "Null Reference (tab = null)"
         (rule "false_right" (formula "24"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "20") (ifseqformula "1"))
      )
      (branch "Index Out of Bounds (tab != null, but i Out of Bounds!)"
         (rule "simplifyUpdate2" (formula "24") (userinteraction))
         (rule "false_right" (formula "24") (userinteraction))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "applyOnRigidFormula" (formula "20"))
         (rule "applyOnPV" (formula "20") (term "0"))
         (rule "simplifyUpdate1" (formula "20") (term "1"))
         (rule "applyOnRigidFormula" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0"))
         (rule "applyOnPV" (formula "1") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "1") (term "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1,1"))
         (rule "applyOnPV" (formula "1") (term "0,1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "9"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
         (rule "jmod_axiom" (formula "5") (term "0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
         (rule "jmod_axiom" (formula "22") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,1,0"))
         (rule "mod_axiom" (formula "4") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
         (rule "mul_literals" (formula "4") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0"))
         (rule "mod_axiom" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,0,1,0,0"))
         (rule "polySimp_sepNegMonomial" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "22") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1"))
         (rule "polySimp_rightDist" (formula "4") (term "0,1"))
         (rule "mul_literals" (formula "4") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "0,0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,0,1,1,0,0"))
         (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "3"))
         (rule "leq_literals" (formula "14") (term "0"))
         (rule "concrete_or_1" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "3"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
         (rule "concrete_and_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "newSym_eq" (formula "5") (inst "l=l_0") (inst "newSymDef=mul(anonIn_i, Z(0(#)))"))
         (rule "times_zero_1" (formula "5") (term "1,1"))
         (rule "add_zero_right" (formula "5") (term "1"))
         (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "5"))
         (rule "eqSymm" (formula "6"))
         (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "6"))
         (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "6"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
         (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
         (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "6"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
         (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
         (rule "leq_literals" (formula "3") (term "0,0"))
         (rule "concrete_or_2" (formula "3") (term "0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "3") (term "1,0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0"))
         (rule "leq_literals" (formula "3") (term "0"))
         (rule "concrete_or_2" (formula "3"))
         (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(3(2(8(1(4(7(3(7(0(1(#)))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
         (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "14") (term "0,0"))
         (rule "concrete_or_2" (formula "14") (term "0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
         (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0"))
         (rule "qeq_literals" (formula "14") (term "0"))
         (rule "concrete_or_2" (formula "14"))
         (rule "nnf_ex2all" (formula "22"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "1,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0,0"))
         (rule "commute_or" (formula "1") (term "1,0"))
         (rule "shift_paren_or" (formula "1") (term "0"))
         (rule "commute_or_2" (formula "1") (term "0,0"))
         (rule "commute_or" (formula "1") (term "0,0,0"))
         (rule "div_axiom" (formula "5") (term "0,0") (inst "quotient=quotient_0"))
         (rule "equal_literals" (formula "5") (term "0"))
         (rule "concrete_or_2" (formula "5"))
         (rule "qeq_literals" (formula "5") (term "0,1"))
         (rule "ifthenelse_true_for" (formula "5") (term "1"))
         (rule "mul_literals" (formula "5") (term "1,1,1"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
         (rule "add_literals" (formula "7") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "polySimp_addComm1" (formula "8") (term "0,0"))
         (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "5"))
         (rule "polySimp_addComm1" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1"))
         (rule "polySimp_rightDist" (formula "6") (term "1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
         (rule "mul_literals" (formula "6") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "polySimp_rightDist" (formula "8") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1"))
         (rule "mul_literals" (formula "8") (term "0,0,1"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
         (rule "polySimp_rightDist" (formula "6") (term "0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1"))
         (rule "polySimp_rightDist" (formula "6") (term "1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
         (rule "mul_literals" (formula "6") (term "0,1"))
         (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=add(Z(neglit(3(2(8(1(4(7(3(7(0(1(#)))))))))))),
    mul(quotient_0, Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "6") (term "0,0"))
         (rule "concrete_or_2" (formula "6") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "leq_literals" (formula "6") (term "0"))
         (rule "concrete_or_2" (formula "6"))
         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "2"))
         (rule "polySimp_rightDist" (formula "9") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "9") (term "0"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "times_zero_1" (formula "9") (term "1,0"))
         (rule "add_zero_right" (formula "9") (term "0"))
         (rule "polySimp_rightDist" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
         (rule "mul_literals" (formula "9") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "9"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0"))
         (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
         (rule "neg_literal" (formula "9") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0"))
         (rule "concrete_or_2" (formula "9") (term "0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0"))
         (rule "qeq_literals" (formula "9") (term "0"))
         (rule "concrete_or_2" (formula "9"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
         (rule "polySimp_rightDist" (formula "10") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0"))
         (rule "polySimp_rightDist" (formula "10") (term "0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "10"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0"))
         (rule "inEqSimp_subsumption4" (formula "10") (ifseqformula "21"))
         (rule "greater_literals" (formula "10") (term "0,0"))
         (rule "concrete_and_1" (formula "10") (term "0"))
         (rule "mul_literals" (formula "10") (term "0,0"))
         (rule "leq_literals" (formula "10") (term "0"))
         (rule "concrete_or_1" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "20"))
         (rule "polySimp_rightDist" (formula "6") (term "0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "inEqSimp_subsumption4" (formula "6") (ifseqformula "10"))
         (rule "greater_literals" (formula "6") (term "0,0"))
         (rule "concrete_and_1" (formula "6") (term "0"))
         (rule "mul_literals" (formula "6") (term "0,0"))
         (rule "leq_literals" (formula "6") (term "0"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "cut_direct" (formula "18") (term "0,0"))
         (branch "CUT: anonIn_value = null TRUE"
            (rule "concrete_or_1" (formula "19") (term "0"))
            (rule "concrete_or_1" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "jdiv_axiom" (formula "11") (term "0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,2,1"))
            (rule "eqSymm" (formula "11"))
            (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "12"))
            (rule "inEqSimp_subsumption6" (formula "11") (term "0,0") (ifseqformula "4"))
            (rule "greater_literals" (formula "11") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
            (rule "leq_literals" (formula "11") (term "0,0,0"))
            (rule "concrete_or_1" (formula "11") (term "0,0"))
            (rule "ifthenelse_true" (formula "11") (term "0"))
            (rule "polyDiv_pullOut" (formula "11") (term "0") (inst "polyDivCoeff=l_0"))
            (rule "equal_literals" (formula "11") (term "0,0"))
            (rule "ifthenelse_false" (formula "11") (term "0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_homoEq" (formula "11"))
            (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "11") (term "1,0,0,0,1,0"))
            (rule "times_zero_1" (formula "11") (term "0,0,0,1,0"))
            (rule "div_literals" (formula "11") (term "0,0,1,0"))
            (rule "add_zero_left" (formula "11") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,0"))
            (rule "times_zero_1" (formula "11") (term "0"))
            (rule "eqClose" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "cut_direct" (formula "19") (term "0"))
            (branch "CUT: anonIn_k.<created> = TRUE TRUE"
               (rule "concrete_or_1" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "cut_direct" (formula "22") (term "0"))
               (branch "CUT: self.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "2") (term "1,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "21"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "CUT: self.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "22"))
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "21"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
            (branch "CUT: anonIn_k.<created> = TRUE FALSE"
               (rule "concrete_or_2" (formula "19"))
               (rule "cut_direct" (formula "22") (term "0"))
               (branch "CUT: self.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "21"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "CUT: self.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "22"))
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "21"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
         )
         (branch "CUT: anonIn_value = null FALSE"
            (rule "concrete_or_2" (formula "18") (term "0"))
            (rule "jdiv_axiom" (formula "11") (term "0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,2,1"))
            (rule "eqSymm" (formula "11"))
            (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
            (rule "inEqSimp_subsumption6" (formula "11") (term "0,0") (ifseqformula "4"))
            (rule "greater_literals" (formula "11") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "11") (term "0,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
            (rule "leq_literals" (formula "11") (term "0,0,0"))
            (rule "concrete_or_1" (formula "11") (term "0,0"))
            (rule "ifthenelse_true" (formula "11") (term "0"))
            (rule "polyDiv_pullOut" (formula "11") (term "0") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0"))
            (rule "equal_literals" (formula "11") (term "0,0"))
            (rule "ifthenelse_false" (formula "11") (term "0"))
            (rule "polySimp_pullOutFactor0" (formula "11") (term "0,0,0"))
            (rule "add_literals" (formula "11") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "11") (term "0,0,0"))
            (rule "div_literals" (formula "11") (term "0,0"))
            (rule "add_zero_left" (formula "11") (term "0"))
            (rule "eqClose" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "cut_direct" (formula "22") (term "0"))
            (branch "CUT: self.<created> = TRUE TRUE"
               (rule "concrete_or_1" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "cut_direct" (formula "21") (term "0"))
               (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "cut_direct" (formula "19") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "21"))
                  (rule "cut_direct" (formula "19") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
            (branch "CUT: self.<created> = TRUE FALSE"
               (rule "concrete_or_2" (formula "22"))
               (rule "cut_direct" (formula "21") (term "0"))
               (branch "CUT: anonIn_tab.<created> = TRUE TRUE"
                  (rule "concrete_or_1" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "cut_direct" (formula "19") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "2") (term "1,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "CUT: anonIn_tab.<created> = TRUE FALSE"
                  (rule "concrete_or_2" (formula "21"))
                  (rule "cut_direct" (formula "19") (term "0"))
                  (branch "CUT: anonIn_k.<created> = TRUE TRUE"
                     (rule "concrete_or_1" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "times_zero_1" (formula "2") (term "1,1,0"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: anonIn_k.<created> = TRUE FALSE"
                     (rule "concrete_or_2" (formula "19"))
                     (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "6"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq3" (formula "2") (ifseqformula "11"))
                     (rule "greater_literals" (formula "2") (term "0,0"))
                     (rule "concrete_impl_1" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
         )
      )
      (branch "Array Store Exception (incompatible dynamic element type of tab and k)"
         (rule "false_right" (formula "24"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "notLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "simplifyUpdate1" (formula "2") (term "1"))
         (rule "applyOnPV" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "21"))
         (rule "simplifyUpdate1" (formula "21") (term "0"))
         (rule "simplifyUpdate1" (formula "21") (term "1"))
         (rule "applyOnPV" (formula "21") (term "0"))
         (rule "applyOnPV" (formula "21") (term "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "simplifyUpdate1" (formula "1") (term "0"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "20"))
         (rule "simplifyUpdate1" (formula "20") (term "1"))
         (rule "applyOnPV" (formula "20") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "array_store_known_dynamic_array_type" (formula "20") (ifseqformula "6"))
         (rule "instanceof_static_type" (formula "20") (term "0,1"))
         (rule "boolean_equal" (formula "20") (term "1"))
         (rule "concrete_or_3" (formula "20"))
         (rule "closeTrue" (formula "20"))
      )
   )
   (branch "Null Reference (v_1 = null)"
      (rule "false_right" (formula "24"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "close" (formula "23") (ifseqformula "1"))
   )
)
(branch "Null Reference (v = null)"
   (rule "false_right" (formula "24"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "close" (formula "23") (ifseqformula "1"))
)
)
}
