\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jun 11 16:29:21 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=500
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Fri Jun 11 16:29:21 CEST 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:put(java.lang.Object,java.lang.Object)].JML exceptional_behavior block contract.0
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:put(java.lang.Object,java.lang.Object)].JML exceptional_behavior block contract.0
class=de.uka.ilkd.key.proof.init.FunctionalBlockContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "a6034b00a3"))

(autoModeTime "4225")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anonOut_heap,heap_Before_METHOD,savedHeap_Before_METHOD,len_Before_METHOD#8,result#6,exc#7,heap_Before_BLOCK,savedHeap_Before_BLOCK,o,f,anonIn_heap,anonIn_len"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,0,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,0,1"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "13") (term "1,0,0,1,0,1"))
(rule "translateJavaSubInt" (formula "4") (term "1"))
(rule "translateJavaAddInt" (formula "2") (term "0"))
(rule "translateJavaMulInt" (formula "3") (term "1"))
(rule "elementOfSingleton" (formula "13") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteGeq" (formula "2"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "exc#7_1"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=java_util_VerifiedIdentityHashMap_threshold_0"))
(rule "simplifySelectOfAnon" (formula "4"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replaceKnownSelect_taclet_0" (formula "2") (term "0"))
(rule "hideAuxiliaryEq" (formula "4"))
(rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "4") (term "0"))
(rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "2") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "2"))
(rule "pullOutSelect" (formula "2") (term "0,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_size_0"))
(rule "simplifySelectOfAnon" (formula "2"))
 (builtin "One Step Simplification" (formula "2"))
(rule "hideAuxiliaryEq" (formula "2"))
(rule "replaceKnownAuxiliaryConstant_taclet_3" (formula "2") (term "0,0"))
(rule "inEqSimp_commuteGeq" (formula "2"))
(rule "expand_subJint" (formula "4") (term "1"))
(rule "sub_literals" (formula "4") (term "0,1"))
(rule "expand_mulJint" (formula "3") (term "1"))
(rule "mul_literals" (formula "3") (term "0,1"))
(rule "expand_addJint" (formula "2") (term "1"))
(rule "polySimp_addComm0" (formula "2") (term "0,1"))
(rule "expand_moduloInteger" (formula "4") (term "1"))
(rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,1"))
(rule "replace_int_RANGE" (formula "4") (term "1,1,1"))
(rule "replace_int_MIN" (formula "4") (term "0,1"))
(rule "add_literals" (formula "4") (term "0,1,1"))
(rule "expand_moduloInteger" (formula "3") (term "1"))
(rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,1"))
(rule "replace_int_RANGE" (formula "3") (term "1,1,1"))
(rule "replace_int_MIN" (formula "3") (term "0,1"))
(rule "add_literals" (formula "3") (term "0,1,1"))
(rule "expand_moduloInteger" (formula "2") (term "1"))
(rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,1"))
(rule "replace_int_RANGE" (formula "2") (term "1,1,1"))
(rule "replace_int_MIN" (formula "2") (term "0,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,1,1"))
(rule "add_literals" (formula "2") (term "0,0,1,1"))
(rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
 (builtin "One Step Simplification" (formula "13"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
(rule "compound_greater_equal_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
(rule "preincrement_assignment_attribute" (formula "13") (term "1") (inst "#v=v"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "v"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "eval_order_access4" (formula "13") (term "1") (inst "#v1=x_3") (inst "#v0=v_1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "v_1"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
(rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_4"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_4"))
(rule "remove_parentheses_right" (formula "13") (term "1"))
(rule "compound_addition_1" (formula "13") (term "1") (inst "#v=x_5"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_5"))
(rule "assignment_read_attribute" (formula "13"))
(branch "Normal Execution (v != null)"
    (builtin "One Step Simplification" (formula "13"))
   (rule "replaceKnownSelect_taclet_2" (formula "13") (term "0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_3" (formula "13") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaAddInt" (formula "13") (term "0,1,0"))
   (rule "expand_addJint" (formula "13") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "13") (term "0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,1,0"))
   (rule "replace_int_MIN" (formula "13") (term "0,0,1,0"))
   (rule "replace_int_RANGE" (formula "13") (term "1,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "13") (term "0,0,1,0,1,0"))
   (rule "widening_identity_cast_5" (formula "13") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "assignment_write_attribute" (formula "13"))
   (branch "Normal Execution (v_1 != null)"
       (builtin "One Step Simplification" (formula "13"))
      (rule "assignment_read_attribute" (formula "13"))
      (branch "Normal Execution (v != null)"
          (builtin "One Step Simplification" (formula "13"))
         (rule "pullOutSelect" (formula "13") (term "0,1,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_size_1"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "13") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
         (rule "assignment_read_attribute_this" (formula "13"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "dismissNonSelectedField" (formula "13") (term "0,1,0"))
         (rule "replaceKnownSelect_taclet_0" (formula "13") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "13") (term "0,1,0"))
         (rule "greater_equal_than_comparison_simple" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "0,0,1,0"))
         (rule "replace_known_left" (formula "13") (term "0,0,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "arrayLengthIsAShort" (formula "3") (term "0"))
         (rule "expand_inShort" (formula "3"))
         (rule "replace_short_MIN" (formula "3") (term "0,1"))
         (rule "replace_short_MAX" (formula "3") (term "1,0"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "arrayLengthNotNegative" (formula "5") (term "0"))
         (rule "ifSplit" (formula "16"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
             (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_resize,exc,heapAfter_resize,anon_heap_resize") (contract "java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap::resize(int)].JML exceptional_behavior operation contract.0#java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap::resize(int)].JML normal_behavior operation contract.0"))
            (branch "Post (resize)"
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "typeEqDerived" (formula "18") (term "0,1,1,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
               (rule "andLeft" (formula "18"))
               (rule "notLeft" (formula "18"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,0,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "1,0,0,0,0,1,0"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,0,1,1,0"))
               (rule "translateJavaMulInt" (formula "18") (term "1,1,0,0,0"))
               (rule "eqSymm" (formula "18") (term "0,0,1,1,0,1"))
               (rule "eqSymm" (formula "18") (term "1,0,0,1,0,1"))
               (rule "translateJavaMulInt" (formula "18") (term "1,0,0,1"))
               (rule "eqSymm" (formula "18") (term "0,1,0,1,0,0,1,1"))
               (rule "eqSymm" (formula "18") (term "1,1,0,1,0,0,1,1"))
               (rule "translateJavaMulInt" (formula "18") (term "1,1,1,1,0,1"))
               (rule "translateJavaMulInt" (formula "18") (term "1,1,1,0,1,1,0,1"))
               (rule "translateJavaSubInt" (formula "18") (term "1,0,0,0,1,0,1"))
               (rule "translateJavaMulInt" (formula "18") (term "1,0,0,1,0,1,1,0,1"))
               (rule "translateJavaMulInt" (formula "18") (term "1,0,0,1,0,1,0,1"))
               (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0"))
               (rule "translateJavaMulInt" (formula "18") (term "1,1,1,0,1,0,1"))
               (rule "translateJavaMulInt" (formula "19") (term "1,0,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,1,0"))
               (rule "replace_known_right" (formula "16") (term "0,0,1,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "polySimp_addComm0" (formula "18") (term "0,2,0,1,1,0,1,0,0,1,1"))
               (rule "polySimp_addComm0" (formula "18") (term "0,2,1,1,1,0,1,0,0,1,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,1,0,1,0,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,1,0,1,1,0,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "18") (term "0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "18") (term "0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,1,0,1,1,0,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,1,1,0,0,0,0,1,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,1,0,1,0,1"))
               (rule "dismissNonSelectedField" (formula "19") (term "0,1,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "19") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "19") (term "0,1,0"))
               (rule "dismissNonSelectedField" (formula "19") (term "0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,1,1,0,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0,1,0,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "1,0,1,0,1,0,0,1,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,1,0,1,0,0,1,1"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,0,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0,1,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "16") (term "0,1,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "16") (term "0,1,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "18") (term "1,1,0,1,0,1,0,0,1,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "1,1,1,0,1,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,1,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,0,0,0,1,0"))
               (rule "pullOutSelect" (formula "18") (term "0,0,1,1,1,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_0"))
               (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")))
               (rule "replaceKnownSelect_taclet00000_6" (formula "19") (term "0,1,0,0,1,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_6" (formula "19") (term "0,1,1,0,0,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_6" (formula "19") (term "1,0,1,1,0,1,0,0,1,1"))
               (rule "replaceKnownSelect_taclet00000_6" (formula "19") (term "1,0,0,1,0,1,0,0,1,1"))
               (rule "replaceKnownSelect_taclet00000_6" (formula "19") (term "0,1,1,0,0,0,1,0,0,1,1"))
               (rule "dismissNonSelectedField" (formula "18") (term "2,0"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "11")))
               (rule "pullOutSelect" (formula "19") (term "0,0,0,0,1,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_threshold_1"))
               (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")))
               (rule "eqSymm" (formula "20") (term "0,0,0,1,0,1"))
               (rule "dismissNonSelectedField" (formula "19") (term "2,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "19") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "19") (term "2,0"))
               (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "11")))
               (rule "pullOutSelect" (formula "20") (term "0,0,0,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_1"))
               (rule "simplifySelectOfAnon" (formula "20"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "18") (term "2,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "22") (term "0,0,0,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "16") (term "0,1,1,1,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "18") (term "0,1,1,2,0,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,1,0,0,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "19") (term "0,1,1,2,0,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,0,0,1,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,1,0,0,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "16") (term "0,0,1,0,0,0,1,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,1,1,0,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "18") (term "0,0,1,0,0,0,2,0,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "19") (term "0,0,1,0,0,0,2,0,0"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,1,1,0,1,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,0,0,1,0,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,1,1,0,0,0,0,1,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "0,0,0,0,1,0,1,1,0,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "1,1,1,1,0,1,0,0,1,1"))
               (rule "replaceKnownSelect_taclet00000_8" (formula "21") (term "1,1,0,1,0,1,0,0,1,1"))
               (rule "hideAuxiliaryEq" (formula "20"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "18") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "21") (term "0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "16") (term "0,1,1,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "18") (term "0,1,1,2,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "19") (term "0,1,1,2,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,0,0,1,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,1,0,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "16") (term "0,0,1,0,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,1,1,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "19") (term "0,0,1,0,0,0,2,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,1,1,0,1,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,0,0,1,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "18") (term "0,0,1,0,0,0,2,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,1,1,0,0,0,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "1,1,1,1,0,1,0,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "1,1,0,1,0,1,0,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_9" (formula "20") (term "0,0,0,0,1,0,1,1,0,1"))
               (rule "commuteUnion" (formula "16") (term "0,1,1,0"))
               (rule "commuteUnion" (formula "18") (term "0,1,2,0,0"))
               (rule "commuteUnion" (formula "19") (term "0,1,2,0,0"))
               (rule "expand_mulJint" (formula "20") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
               (rule "expand_mulJint" (formula "20") (term "1,0,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
               (rule "expand_mulJint" (formula "20") (term "1,1,1,1,0,1"))
               (rule "expand_mulJint" (formula "20") (term "1,1,1,0,1,1,0,1"))
               (rule "expand_mulJint" (formula "20") (term "1,0,0,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,1,0,1"))
               (rule "expand_mulJint" (formula "20") (term "1,0,0,1,0,1,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,1,0,1"))
               (rule "expand_subJint" (formula "20") (term "1,1,0,0"))
               (rule "sub_literals" (formula "20") (term "0,1,1,0,0"))
               (rule "expand_mulJint" (formula "20") (term "1,1,1,0,1,0,1"))
               (rule "expand_mulJint" (formula "21") (term "1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0"))
               (rule "expand_subJint" (formula "21") (term "1,1,0"))
               (rule "sub_literals" (formula "21") (term "0,1,1,0"))
               (rule "expand_mulJint" (formula "16") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,1,0"))
               (rule "expand_subJint" (formula "16") (term "1,1,0,0,1,0"))
               (rule "sub_literals" (formula "16") (term "0,1,1,0,0,1,0"))
               (rule "expand_subJint" (formula "18") (term "1,1,0,0,2,0,0"))
               (rule "sub_literals" (formula "18") (term "0,1,1,0,0,2,0,0"))
               (rule "expand_mulJint" (formula "18") (term "1,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,2,0,0"))
               (rule "expand_subJint" (formula "20") (term "0,0,0,0,1,0,1"))
               (rule "sub_literals" (formula "20") (term "0,0,0,0,0,1,0,1"))
               (rule "expand_mulJint" (formula "19") (term "1,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,2,0,0"))
               (rule "expand_subJint" (formula "19") (term "1,1,0,0,2,0,0"))
               (rule "sub_literals" (formula "19") (term "0,1,1,0,0,2,0,0"))
               (rule "expand_moduloInteger" (formula "20") (term "1,1,0,0,0"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,0"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,1,0,0,0"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,1,0,0,0"))
               (rule "add_literals" (formula "20") (term "0,1,1,1,0,0,0"))
               (rule "expand_moduloInteger" (formula "20") (term "1,0,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,0,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,0,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,0,0,1"))
               (rule "add_literals" (formula "20") (term "0,1,1,0,0,1"))
               (rule "expand_moduloInteger" (formula "20") (term "1,1,1,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,1,1,1,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,1,1,1,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,1,1,1,0,1"))
               (rule "expand_moduloInteger" (formula "20") (term "1,1,1,0,1,1,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,1,1,0,1,1,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,1,1,0,1,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,1,1,0,1,1,0,1"))
               (rule "expand_moduloInteger" (formula "20") (term "1,0,0,1,0,1,1,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,0,0,1,0,1,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,0,0,1,0,1,1,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,0,0,1,0,1,1,0,1"))
               (rule "add_literals" (formula "20") (term "0,1,1,0,0,1,0,1,1,0,1"))
               (rule "expand_moduloInteger" (formula "20") (term "1,0,0,1,0,1,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,0,0,1,0,1,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,0,0,1,0,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,0,0,1,0,1,0,1"))
               (rule "add_literals" (formula "20") (term "0,1,1,0,0,1,0,1,0,1"))
               (rule "expand_moduloInteger" (formula "20") (term "1,1,0,0"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,1,0,0"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,1,0,0"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,1,1,1,0,0"))
               (rule "expand_moduloInteger" (formula "20") (term "1,1,1,0,1,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,1,1,1,0,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,1,1,1,0,1,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,1,1,1,0,1,0,1"))
               (rule "expand_moduloInteger" (formula "21") (term "1,0,0"))
               (rule "replace_int_RANGE" (formula "21") (term "1,1,1,0,0"))
               (rule "replace_int_HALFRANGE" (formula "21") (term "0,0,1,1,0,0"))
               (rule "replace_int_MIN" (formula "21") (term "0,1,0,0"))
               (rule "add_literals" (formula "21") (term "0,1,1,0,0"))
               (rule "expand_moduloInteger" (formula "21") (term "1,1,0"))
               (rule "replace_int_RANGE" (formula "21") (term "1,1,1,1,0"))
               (rule "replace_int_MIN" (formula "21") (term "0,1,1,0"))
               (rule "replace_int_HALFRANGE" (formula "21") (term "0,0,1,1,1,0"))
               (rule "add_literals" (formula "21") (term "0,1,1,1,0"))
               (rule "replace_known_left" (formula "21") (term "1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "expand_moduloInteger" (formula "16") (term "1,1,0,0,0,1,0"))
               (rule "replace_int_RANGE" (formula "16") (term "1,1,1,1,0,0,0,1,0"))
               (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,0,1,0"))
               (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,1,1,0,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,1,1,1,0,0,0,1,0"))
               (rule "expand_moduloInteger" (formula "16") (term "1,1,0,0,1,0"))
               (rule "replace_int_RANGE" (formula "16") (term "1,1,1,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,1,1,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,1,1,1,0,0,1,0"))
               (rule "expand_moduloInteger" (formula "18") (term "1,1,0,0,2,0,0"))
               (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,1,1,0,0,2,0,0"))
               (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,2,0,0"))
               (rule "replace_int_RANGE" (formula "18") (term "1,1,1,1,0,0,2,0,0"))
               (rule "add_literals" (formula "18") (term "0,1,1,1,0,0,2,0,0"))
               (rule "expand_moduloInteger" (formula "18") (term "1,1,0,0,0,2,0,0"))
               (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,0,2,0,0"))
               (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,1,1,0,0,0,2,0,0"))
               (rule "replace_int_RANGE" (formula "18") (term "1,1,1,1,0,0,0,2,0,0"))
               (rule "add_literals" (formula "18") (term "0,1,1,1,0,0,0,2,0,0"))
               (rule "expand_moduloInteger" (formula "20") (term "0,0,0,0,1,0,1"))
               (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,0,0,0,0,1,0,1"))
               (rule "replace_int_MIN" (formula "20") (term "0,0,0,0,0,1,0,1"))
               (rule "replace_int_RANGE" (formula "20") (term "1,1,0,0,0,0,1,0,1"))
               (rule "add_literals" (formula "20") (term "0,1,0,0,0,0,1,0,1"))
               (rule "expand_moduloInteger" (formula "19") (term "1,1,0,0,0,2,0,0"))
               (rule "replace_int_RANGE" (formula "19") (term "1,1,1,1,0,0,0,2,0,0"))
               (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,1,1,0,0,0,2,0,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,0,2,0,0"))
               (rule "add_literals" (formula "19") (term "0,1,1,1,0,0,0,2,0,0"))
               (rule "expand_moduloInteger" (formula "19") (term "1,1,0,0,2,0,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,2,0,0"))
               (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,1,1,0,0,2,0,0"))
               (rule "replace_int_RANGE" (formula "19") (term "1,1,1,1,0,0,2,0,0"))
               (rule "add_literals" (formula "19") (term "0,1,1,1,0,0,2,0,0"))
               (rule "tryEmpty" (formula "23") (term "1"))
               (rule "blockEmptyLabel" (formula "23") (term "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "commute_and" (formula "20") (term "0,0,0,0,0,0"))
               (rule "commute_and" (formula "21"))
               (rule "commute_and" (formula "16") (term "0,0,0,0,0,0,1,0"))
               (rule "commute_and" (formula "20") (term "0,0,0,1,0,0,1,1"))
               (rule "commute_and" (formula "20") (term "0,0,0,0,1,1"))
               (rule "commute_and" (formula "18") (term "0,0,0,0,0,0,2,0,0"))
               (rule "commute_and" (formula "19") (term "0,0,0,0,0,0,2,0,0"))
               (rule "commute_and" (formula "20") (term "0,1,1,0,1"))
               (rule "commute_and_2" (formula "20") (term "0,1,0,1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "emptyModality" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "false_right" (formula "23"))
               (rule "polySimp_homoEq" (formula "20") (term "0,0,0,1,0,1"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1,0,1"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,1,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,1,0,1"))
               (rule "polySimp_addComm0" (formula "20") (term "0,0,0,0,0,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0,0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0,0,0,2,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,1,0,1"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,1,1,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,1,1,0,1"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,1,1,0,1"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,1,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,2,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,2,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,2,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0,0,0,2,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,2,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,2,0,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,0,1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,2,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,2,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,2,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,2,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,2,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,2,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,2,0,0"))
               (rule "mod_axiom" (formula "20") (term "1,1,0,0,1"))
               (rule "div_literals" (formula "20") (term "0,0,1,1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1"))
               (rule "add_zero_right" (formula "20") (term "1,1,0,0,1"))
               (rule "add_literals" (formula "20") (term "1,0,0,1"))
               (rule "mod_axiom" (formula "6") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
               (rule "div_literals" (formula "6") (term "0,1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,1,1"))
               (rule "add_zero_right" (formula "6") (term "1,1"))
               (rule "add_literals" (formula "6") (term "1"))
               (rule "mod_axiom" (formula "7") (term "1,1"))
               (rule "div_literals" (formula "7") (term "0,0,1,1,1"))
               (rule "mul_literals" (formula "7") (term "0,1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,1,1"))
               (rule "add_zero_right" (formula "7") (term "1,1"))
               (rule "add_literals" (formula "7") (term "1"))
               (rule "mod_axiom" (formula "21") (term "1,1,1"))
               (rule "div_literals" (formula "21") (term "0,0,1,1,1,1"))
               (rule "mul_literals" (formula "21") (term "0,1,1,1,1"))
               (rule "mul_literals" (formula "21") (term "1,1,1,1"))
               (rule "add_zero_right" (formula "21") (term "1,1,1"))
               (rule "add_literals" (formula "21") (term "1,1"))
               (rule "mod_axiom" (formula "20") (term "1,1,0,0,0,0,1,1,0,1"))
               (rule "div_literals" (formula "20") (term "0,0,1,1,1,0,0,0,0,1,1,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,1,1,0,0,0,0,1,1,0,1"))
               (rule "mul_literals" (formula "20") (term "1,1,1,0,0,0,0,1,1,0,1"))
               (rule "add_zero_right" (formula "20") (term "1,1,0,0,0,0,1,1,0,1"))
               (rule "add_literals" (formula "20") (term "1,0,0,0,0,1,1,0,1"))
               (rule "mod_axiom" (formula "20") (term "1,1,0,0,1,0,0,1,0,1"))
               (rule "div_literals" (formula "20") (term "0,0,1,1,1,0,0,1,0,0,1,0,1"))
               (rule "mul_literals" (formula "20") (term "0,1,1,1,0,0,1,0,0,1,0,1"))
               (rule "mul_literals" (formula "20") (term "1,1,1,0,0,1,0,0,1,0,1"))
               (rule "add_zero_right" (formula "20") (term "1,1,0,0,1,0,0,1,0,1"))
               (rule "add_literals" (formula "20") (term "1,0,0,1,0,0,1,0,1"))
               (rule "mod_axiom" (formula "20") (term "0,1,0,0,0,0,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,0,0,1,0,1"))
               (rule "div_literals" (formula "20") (term "0,1,0,1,0,0,0,0,1,0,1"))
               (rule "mul_literals" (formula "20") (term "1,0,1,0,0,0,0,1,0,1"))
               (rule "add_zero_right" (formula "20") (term "0,1,0,0,0,0,1,0,1"))
               (rule "mul_literals" (formula "20") (term "1,0,0,0,0,1,0,1"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,1,0,1"))
               (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,0,1"))
               (rule "mod_axiom" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0"))
               (rule "div_literals" (formula "20") (term "0,1,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,1,0,0"))
               (rule "mod_axiom" (formula "19") (term "0,1,0,0,1,0,0,2,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0,2,0,0"))
               (rule "div_literals" (formula "19") (term "0,1,0,1,0,0,1,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,1,0,0,1,0,0,2,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,1,0,0,1,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,2,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,1,0,0,2,0,0"))
               (rule "mod_axiom" (formula "18") (term "0,1,0,0,1,0,0,2,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0,2,0,0"))
               (rule "div_literals" (formula "18") (term "0,1,0,1,0,0,1,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,1,0,0,1,0,0,2,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,1,0,0,1,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,2,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,1,0,0,2,0,0"))
               (rule "mod_axiom" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0,1,0"))
               (rule "div_literals" (formula "16") (term "0,1,0,1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "1,0,1,0,0,1,0,0,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,1,0,0,1,0"))
               (rule "mod_axiom" (formula "20") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,0,1,0,0,0"))
               (rule "div_literals" (formula "20") (term "0,1,0,1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "20") (term "0,1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,1,0,0,0"))
               (rule "mod_axiom" (formula "18") (term "0,1,0,0,1,0,0,0,2,0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0,0,2,0,0"))
               (rule "div_literals" (formula "18") (term "0,1,0,1,0,0,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,1,0,0,1,0,0,0,2,0,0"))
               (rule "add_zero_right" (formula "18") (term "0,1,0,0,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,0,2,0,0"))
               (rule "add_literals" (formula "18") (term "0,0,1,0,0,0,2,0,0"))
               (rule "mod_axiom" (formula "16") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,0,0,1,0"))
               (rule "div_literals" (formula "16") (term "0,1,0,1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "1,0,1,0,0,1,0,0,0,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,1,0,0,0,1,0"))
               (rule "mod_axiom" (formula "19") (term "0,1,0,0,1,0,0,0,2,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,0,1,0,0,0,2,0,0"))
               (rule "div_literals" (formula "19") (term "0,1,0,1,0,0,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,1,0,0,1,0,0,0,2,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,1,0,0,1,0,0,0,2,0,0"))
               (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0,2,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,1,0,0,0,2,0,0"))
               (rule "applyEq" (formula "20") (term "1,0,1,0,0") (ifseqformula "7"))
               (rule "add_literals" (formula "20") (term "0,1,0,0"))
               (rule "leq_literals" (formula "20") (term "1,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "applyEq" (formula "19") (term "1,0,1,0,0,2,0,0") (ifseqformula "7"))
               (rule "add_literals" (formula "19") (term "0,1,0,0,2,0,0"))
               (rule "leq_literals" (formula "19") (term "1,0,0,2,0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "hideAuxiliaryEq" (formula "19"))
               (rule "applyEq" (formula "18") (term "1,0,1,0,0,2,0,0") (ifseqformula "7"))
               (rule "add_literals" (formula "18") (term "0,1,0,0,2,0,0"))
               (rule "leq_literals" (formula "18") (term "1,0,0,2,0,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "hideAuxiliaryEq" (formula "18"))
               (rule "applyEq" (formula "16") (term "1,0,1,0,0,1,0") (ifseqformula "7"))
               (rule "add_literals" (formula "16") (term "0,1,0,0,1,0"))
               (rule "leq_literals" (formula "16") (term "1,0,0,1,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
               (rule "leq_literals" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch "Exceptional Post (resize)"
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0") (ifseqformula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "17"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,0,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,0,1,1,0"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,1,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "1,0,0,0,0,1,0"))
               (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0"))
               (rule "translateJavaMulInt" (formula "19") (term "1,1,1,0,1,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "19") (term "1,0,0,0,1"))
               (rule "eqSymm" (formula "19") (term "0,1,0,1,0,0,1,0,1"))
               (rule "eqSymm" (formula "19") (term "0,0,1,1,0,0,1"))
               (rule "eqSymm" (formula "19") (term "1,1,0,1,0,0,1,0,1"))
               (rule "translateJavaSubInt" (formula "19") (term "1,0,0,0,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "18") (term "1,0,0,0"))
               (rule "translateJavaMulInt" (formula "19") (term "1,1,1,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "19") (term "1,0,0,1,0,1,1,0,0,1"))
               (rule "eqSymm" (formula "19") (term "1,0,0,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "19") (term "1,0,0,1,0,1,0,0,1"))
               (rule "translateJavaMulInt" (formula "19") (term "1,1,0,0,0"))
               (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0"))
               (rule "translateJavaMulInt" (formula "19") (term "1,1,1,0,1,0,0,1"))
               (rule "replace_known_right" (formula "18") (term "0,0,1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "replace_known_right" (formula "19") (term "1,1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "replace_known_right" (formula "16") (term "0,1,1,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "dismissNonSelectedField" (formula "17") (term "0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "18") (term "0,1,0,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "18") (term "0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "18") (term "0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "19") (term "0,1,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "19") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "19") (term "0,1,0"))
               (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0,1,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "16") (term "0,1,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "16") (term "0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,0,0"))
               (rule "pullOutSelect" (formula "18") (term "0,0,0,0,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_0"))
               (rule "simplifySelectOfAnon" (formula "18"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "replaceKnownSelect_taclet10000_6" (formula "20") (term "0,0,1,0,0"))
               (rule "replaceKnownSelect_taclet10000_6" (formula "16") (term "0,0,0,0,0,1,0"))
               (rule "hideAuxiliaryEq" (formula "18"))
               (rule "replaceKnownAuxiliaryConstant_taclet10000_7" (formula "19") (term "0,0,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10000_7" (formula "18") (term "0,0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10000_7" (formula "16") (term "0,0,0,0,0,1,0"))
               (rule "expand_mulJint" (formula "18") (term "1,0,0,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
               (rule "expand_subJint" (formula "18") (term "1,1,0,0"))
               (rule "sub_literals" (formula "18") (term "0,1,1,0,0"))
               (rule "expand_subJint" (formula "19") (term "1,1,0"))
               (rule "sub_literals" (formula "19") (term "0,1,1,0"))
               (rule "expand_mulJint" (formula "19") (term "1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
               (rule "expand_mulJint" (formula "16") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
               (rule "expand_subJint" (formula "16") (term "1,1,0,0,1,0"))
               (rule "sub_literals" (formula "16") (term "0,1,1,0,0,1,0"))
               (rule "expand_moduloInteger" (formula "18") (term "1,0,0,0"))
               (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,1,0,0,0"))
               (rule "replace_int_RANGE" (formula "18") (term "1,1,1,0,0,0"))
               (rule "replace_int_MIN" (formula "18") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "18") (term "0,1,1,0,0,0"))
               (rule "expand_moduloInteger" (formula "18") (term "1,1,0,0"))
               (rule "replace_int_RANGE" (formula "18") (term "1,1,1,1,0,0"))
               (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0"))
               (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,1,1,0,0"))
               (rule "add_literals" (formula "18") (term "0,1,1,1,0,0"))
               (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "expand_moduloInteger" (formula "19") (term "1,1,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0"))
               (rule "replace_int_RANGE" (formula "19") (term "1,1,1,1,0"))
               (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,1,1,0"))
               (rule "add_literals" (formula "19") (term "0,1,1,1,0"))
               (rule "expand_moduloInteger" (formula "19") (term "1,1,0,0"))
               (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0"))
               (rule "replace_int_RANGE" (formula "19") (term "1,1,1,1,0,0"))
               (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,1,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,1,1,1,0,0"))
               (rule "expand_moduloInteger" (formula "16") (term "1,0,0,0,1,0"))
               (rule "replace_int_MIN" (formula "16") (term "0,1,0,0,0,1,0"))
               (rule "replace_int_RANGE" (formula "16") (term "1,1,1,0,0,0,1,0"))
               (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,1,0,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,1,1,0,0,0,1,0"))
               (rule "expand_moduloInteger" (formula "16") (term "1,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,1,1,0,0,1,0"))
               (rule "replace_int_RANGE" (formula "16") (term "1,1,1,1,0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,1,1,1,0,0,1,0"))
               (rule "replace_known_left" (formula "16") (term "1,0,0,1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "commute_and" (formula "18") (term "1"))
               (rule "commute_and" (formula "18") (term "0"))
               (rule "tryCatchThrow" (formula "22") (term "1"))
               (rule "commute_and" (formula "16") (term "0,1,0"))
               (rule "unusedLabel" (formula "22") (term "1"))
               (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_6"))
               (rule "equality_comparison_simple" (formula "22") (term "1"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "arrayLengthIsAShort" (formula "19") (term "0,1,0,0"))
               (rule "expand_inShort" (formula "1"))
               (rule "replace_short_MIN" (formula "1") (term "0,1"))
               (rule "replace_short_MAX" (formula "1") (term "1,0"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "arrayLengthNotNegative" (formula "21") (term "0,1,0,0"))
               (rule "ifElseSplit" (formula "25"))
               (branch "if x_6 true"
                   (builtin "One Step Simplification" (formula "26"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_6 false"
                   (builtin "One Step Simplification" (formula "26"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "ifElseSplit" (formula "25"))
                  (branch "if exc instanceof java.lang.Throwable true"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclaration" (formula "25") (term "1") (newnames "e"))
                     (rule "delete_unnecessary_cast" (formula "25") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "25") (term "1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "methodCallEmpty" (formula "25") (term "1"))
                     (rule "emptyModality" (formula "25") (term "1"))
                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                     (rule "mod_axiom" (formula "21") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,1,0"))
                     (rule "div_literals" (formula "21") (term "0,1,1,1,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,1,1,0"))
                     (rule "add_literals" (formula "21") (term "1,1,1,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0"))
                     (rule "mod_axiom" (formula "9") (term "1,1"))
                     (rule "div_literals" (formula "9") (term "0,0,1,1,1"))
                     (rule "times_zero_2" (formula "9") (term "0,1,1,1"))
                     (rule "mul_literals" (formula "9") (term "1,1,1"))
                     (rule "add_literals" (formula "9") (term "1,1"))
                     (rule "add_literals" (formula "9") (term "1"))
                     (rule "mod_axiom" (formula "10") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1"))
                     (rule "div_literals" (formula "10") (term "0,1,1,1"))
                     (rule "mul_literals" (formula "10") (term "1,1,1"))
                     (rule "add_literals" (formula "10") (term "1,1"))
                     (rule "add_literals" (formula "10") (term "1"))
                     (rule "mod_axiom" (formula "19") (term "1,1,1,0,1,0"))
                     (rule "div_literals" (formula "19") (term "0,0,1,1,1,1,0,1,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,1,1,1,0,1,0"))
                     (rule "mul_literals" (formula "19") (term "1,1,1,1,0,1,0"))
                     (rule "add_zero_right" (formula "19") (term "1,1,1,0,1,0"))
                     (rule "add_literals" (formula "19") (term "1,1,0,1,0"))
                     (rule "mod_axiom" (formula "22") (term "0,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0"))
                     (rule "div_literals" (formula "22") (term "0,1,0,1,0,0,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,0,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "22") (term "0,0,1,0"))
                     (rule "mod_axiom" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "div_literals" (formula "22") (term "0,0,1,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                     (rule "applyEq" (formula "22") (term "1,0,1,0") (ifseqformula "10"))
                     (rule "add_literals" (formula "22") (term "0,1,0"))
                     (rule "leq_literals" (formula "22") (term "1,0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                     (rule "leq_literals" (formula "6"))
                     (rule "closeFalse" (formula "6"))
                  )
                  (branch "if exc instanceof java.lang.Throwable false"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Pre (resize)"
                (builtin "One Step Simplification" (formula "16"))
               (rule "wellFormedStorePrimitive" (formula "16") (term "0,1"))
               (rule "wellFormedAnon" (formula "16") (term "0,1"))
               (rule "expand_inInt" (formula "16") (term "1,1"))
               (rule "replace_int_MIN" (formula "16") (term "0,1,1,1"))
               (rule "replace_int_MAX" (formula "16") (term "1,0,1,1"))
               (rule "translateJavaMulInt" (formula "16") (term "1,1,0,0,1,0"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,1,0"))
               (rule "translateJavaMulInt" (formula "16") (term "1,0,0,0,0"))
               (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "16") (term "0,1,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
               (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,1,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "16") (term "0,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "16") (term "0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,1,0,0,0"))
               (rule "replaceKnownSelect_taclet_0" (formula "16") (term "0,1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "16") (term "0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "16") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "mod_axiom" (formula "6") (term "1,1"))
               (rule "div_literals" (formula "6") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
               (rule "mul_literals" (formula "6") (term "1,1,1"))
               (rule "add_zero_right" (formula "6") (term "1,1"))
               (rule "add_literals" (formula "6") (term "1"))
               (rule "mod_axiom" (formula "7") (term "1,1"))
               (rule "div_literals" (formula "7") (term "0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
               (rule "mul_literals" (formula "7") (term "1,1,1"))
               (rule "add_zero_right" (formula "7") (term "1,1"))
               (rule "add_literals" (formula "7") (term "1"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "6"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,1,0"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "5"))
               (rule "eqSymm" (formula "14") (term "1,0"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
               (rule "leq_literals" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (v = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (v_1 = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (v = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "closeFalse" (formula "1"))
)
)
}
