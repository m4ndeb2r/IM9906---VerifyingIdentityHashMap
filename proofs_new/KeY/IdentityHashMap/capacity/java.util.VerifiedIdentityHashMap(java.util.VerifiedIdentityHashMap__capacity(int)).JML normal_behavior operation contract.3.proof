\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 18 22:49:09 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=8000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\include "../../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Mon Oct 18 22:49:09 CEST 2021
contract=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:capacity(int)].JML normal_behavior operation contract.3
name=java.util.VerifiedIdentityHashMap[java.util.VerifiedIdentityHashMap\\:\\:capacity(int)].JML normal_behavior operation contract.3
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "40b2d39292"))

(autoModeTime "843")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "expectedMaxSize,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_capacity,savedHeapBefore_capacity,_expectedMaxSizeBefore_capacity"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "minCapacity"))
(rule "compound_addition_2" (formula "8") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "assignmentModulo" (formula "8"))
(branch "Case 1"
   (rule "translateJavaMod" (formula "8") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "8"))
   (rule "simplifyUpdate3" (formula "8") (term "1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
   (rule "compound_multiplication_1" (formula "8") (term "1") (inst "#v=x_2"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
   (rule "remove_parentheses_right" (formula "8") (term "1"))
   (rule "assignmentDivisionInt" (formula "8"))
   (branch "Case 1"
      (rule "translateJavaDivInt" (formula "8") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
      (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
      (rule "translateJavaMulInt" (formula "8") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
      (rule "assignmentAdditionInt" (formula "8") (term "1"))
      (rule "translateJavaAddInt" (formula "8") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "1,0,1,0"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "result_1"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
      (rule "compound_assignment_5_nonsimple" (formula "8") (term "1"))
      (rule "ifElseUnfold" (formula "8") (term "1") (inst "#boolv=x_4"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
      (rule "greater_than_comparison_simple" (formula "8") (term "1"))
      (rule "insert_constant_value" (formula "8") (term "1,0,0,0,1"))
      (rule "sequentialToParallel2" (formula "8"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "applyOnElementary" (formula "8") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
      (rule "ifElseSplit" (formula "8"))
      (branch "if x_4 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "ifElseSkipElse" (formula "9") (term "1"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "assignment" (formula "9") (term "1"))
         (rule "simplifyUpdate2" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
         (rule "insert_constant_value" (formula "9") (term "0,0,1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "methodCallReturn" (formula "9") (term "1"))
         (rule "assignment" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "applyOnElementary" (formula "9") (term "1,0"))
         (rule "applyOnPV" (formula "9") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "9") (term "1"))
         (rule "tryEmpty" (formula "9") (term "1"))
         (rule "emptyModality" (formula "9") (term "1"))
         (rule "applyOnRigidFormula" (formula "9"))
         (rule "simplifyUpdate2" (formula "9") (term "1"))
         (rule "simplifyUpdate2" (formula "9") (term "0"))
         (rule "applyOnRigidFormula" (formula "9") (term "1"))
         (rule "applyOnRigidFormula" (formula "9") (term "0"))
         (rule "simplifyUpdate2" (formula "9") (term "1,0"))
         (rule "simplifyUpdate2" (formula "9") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "9") (term "1,0"))
         (rule "applyOnPV" (formula "9") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,1,0"))
         (rule "eqClose" (formula "9") (term "1,0"))
         (rule "concrete_and_3" (formula "9") (term "0"))
         (rule "applyOnRigidFormula" (formula "9") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1"))
         (rule "applyOnRigidFormula" (formula "9") (term "0"))
         (rule "simplifyUpdate2" (formula "9") (term "1,0"))
         (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "7"))
         (rule "concrete_and_3" (formula "9") (term "0"))
         (rule "applyOnRigidTerm" (formula "9") (term "0,0,0,1"))
         (rule "simplifyUpdate1" (formula "9") (term "2,0,0,0,1"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,0,0,1"))
         (rule "applyOnPV" (formula "9") (term "0,0,0,0,1"))
         (rule "eqClose" (formula "9") (term "0,0,1"))
         (rule "applyOnRigidFormula" (formula "9") (term "0"))
         (rule "inEqSimp_gtToGeq" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "1,0,0"))
         (rule "applyOnPV" (formula "9") (term "1,1,0,0"))
         (rule "simplifyUpdate1" (formula "9") (term "0,1,0,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "0,0,0"))
         (rule "simplifyUpdate2" (formula "9") (term "0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "1,0,0,0"))
         (rule "applyOnPV" (formula "9") (term "1,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "9") (term "0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
         (rule "all_unused" (formula "9") (term "0,1"))
         (rule "all_unused" (formula "9") (term "1"))
         (rule "concrete_and_3" (formula "9"))
         (rule "nnf_ex2all" (formula "9"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (inst "i_1=i_1") (inst "j_0=j_0") (inst "i_2=i_2") (inst "i_3=i_3") (inst "j_1=j_1") (inst "i_4=i_4") (inst "j_2=j_2") (inst "i_5=i_5") (inst "i_6=i_6") (inst "i_7=i_7") (inst "i_8=i_8") (inst "j_3=j_3") (inst "i_9=i_9") (ifseqformula "5"))
         (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1"))
         (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1"))
         (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,1,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "equal_literals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_4" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
         (rule "concrete_and_4" (formula "8") (term "0,0,0,0,0,0,0,0"))
         (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0,0"))
         (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0"))
         (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0"))
         (rule "concrete_and_2" (formula "8") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "8") (term "0,0,0"))
         (rule "concrete_and_2" (formula "8") (term "0,0"))
         (rule "concrete_and_2" (formula "8") (term "0"))
         (rule "concrete_and_2" (formula "8"))
         (rule "closeFalse" (formula "8"))
      )
      (branch "if x_4 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "7"))
         (rule "applyOnPV" (formula "7") (term "0"))
         (rule "simplifyUpdate1" (formula "7") (term "1"))
         (rule "ifthenelse_concrete3" (formula "7"))
         (rule "boolean_not_equal_2" (formula "7") (term "1"))
         (rule "concrete_or_4" (formula "7"))
         (rule "less_than_comparison_simple" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "applyOnElementary" (formula "9") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
         (rule "blockEmpty" (formula "9") (term "1"))
         (rule "ifElseSplit" (formula "9"))
         (branch "if x_3 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "ifthenelse_concrete3" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "insert_constant_value" (formula "10") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "blockEmpty" (formula "10") (term "1"))
            (rule "methodCallReturn" (formula "10") (term "1"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnPV" (formula "10") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "10") (term "1"))
            (rule "tryEmpty" (formula "10") (term "1"))
            (rule "emptyModality" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "simplifyUpdate2" (formula "10") (term "1"))
            (rule "simplifyUpdate2" (formula "10") (term "0"))
            (rule "applyOnRigidFormula" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "10") (term "0"))
            (rule "simplifyUpdate2" (formula "10") (term "1,0"))
            (rule "simplifyUpdate2" (formula "10") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,1,0"))
            (rule "eqClose" (formula "10") (term "1,0"))
            (rule "concrete_and_3" (formula "10") (term "0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1"))
            (rule "inEqSimp_gtRight" (formula "8"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0"))
            (rule "simplifyUpdate2" (formula "10") (term "1,0"))
            (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "8"))
            (rule "concrete_and_3" (formula "10") (term "0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,0,0,1"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,0,1"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,0,0,1"))
            (rule "eqClose" (formula "10") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "2"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "10") (term "0,1,0,0"))
            (rule "applyOnPV" (formula "10") (term "1,1,0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,0"))
            (rule "simplifyUpdate2" (formula "10") (term "0,0,0,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "1,0,0,0"))
            (rule "simplifyUpdate1" (formula "10") (term "0,1,0,0,0"))
            (rule "applyOnPV" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "2"))
            (rule "leq_literals" (formula "1") (term "0"))
            (rule "concrete_or_1" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "all_unused" (formula "9") (term "0,1"))
            (rule "all_unused" (formula "9") (term "1"))
            (rule "concrete_and_3" (formula "9"))
            (rule "nnf_ex2all" (formula "9"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "1,1,0,0"))
            (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "8") (inst "i=i") (inst "j=j") (inst "i_0=i_0") (inst "i_1=i_1") (inst "j_0=j_0") (inst "i_2=i_2") (inst "i_3=i_3") (inst "j_1=j_1") (inst "i_4=i_4") (inst "j_2=j_2") (inst "i_5=i_5") (inst "i_6=i_6") (inst "i_7=i_7") (inst "i_8=i_8") (inst "j_3=j_3") (inst "i_9=i_9") (ifseqformula "5"))
            (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1"))
            (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1"))
            (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,1,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
            (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,1,1,1,0,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "insert_constant_value" (formula "8") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqClose" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "8") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "equal_literals" (formula "8") (term "1,1,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_4" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_4" (formula "8") (term "0,0,0,0,0,0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0,0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0,0"))
            (rule "concrete_and_2" (formula "8") (term "0,0"))
            (rule "concrete_and_2" (formula "8") (term "0"))
            (rule "concrete_and_2" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "if x_3 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "simplifyUpdate1" (formula "7") (term "1"))
            (rule "applyOnPV" (formula "7") (term "0"))
            (rule "ifthenelse_concrete3" (formula "7"))
            (rule "boolean_not_equal_2" (formula "7") (term "1"))
            (rule "concrete_or_4" (formula "7"))
            (rule "assignment" (formula "10") (term "1"))
            (rule "insert_constant_value" (formula "10") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "elim_double_block_3" (formula "10") (term "1"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_2_in_VerifiedIdentityHashMap" (formula "6"))
            (rule "notLeft" (formula "6"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "1"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
            (rule "concrete_or_2" (formula "1"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_VerifiedIdentityHashMap" (formula "7"))
            (rule "insert_constant_value" (formula "7") (term "0,0,1"))
            (rule "insert_constant_value" (formula "7") (term "0,1,0,0"))
            (rule "eqClose" (formula "7") (term "1,0,0"))
            (rule "concrete_and_3" (formula "7") (term "0,0"))
            (rule "insert_constant_value" (formula "7") (term "0,0,1,0"))
            (rule "insert_constant_value" (formula "7") (term "0,1,0,0"))
            (rule "eqClose" (formula "7") (term "1,0,0"))
            (rule "concrete_and_3" (formula "7") (term "0,0"))
            (rule "insert_constant_value" (formula "7") (term "0,1,0,0"))
            (rule "eqClose" (formula "7") (term "1,0,0"))
            (rule "concrete_and_3" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "0,1"))
            (rule "mul_literals" (formula "7") (term "0,1,0"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "inEqSimp_commuteGeq" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "arrayLengthIsAShort" (formula "8") (term "0"))
            (rule "arrayLengthNotNegative" (formula "9") (term "0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "13"))
            (rule "concrete_or_2" (formula "7"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_VerifiedIdentityHashMap" (formula "12") (inst "i=i"))
            (rule "polySimp_addComm0" (formula "12") (term "0,2,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "commute_and" (formula "12") (term "0,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_VerifiedIdentityHashMap" (formula "13") (inst "i=i") (inst "j=j"))
            (rule "eqSymm" (formula "13") (term "1,1,0,1,0"))
            (rule "eqSymm" (formula "13") (term "1,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,2,0,0,0,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,2,1,1,0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,2,0,1,0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "commute_and" (formula "13") (term "0,0"))
            (rule "commute_and" (formula "13") (term "0,0,1,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_9_in_VerifiedIdentityHashMap" (formula "14") (inst "i=i"))
            (rule "eqSymm" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "0,2,0,0,0,2,0"))
            (rule "ifthenelse_negated" (formula "14") (term "2,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_11_in_VerifiedIdentityHashMap" (formula "15") (inst "i=i"))
            (rule "exLeft" (formula "15") (inst "sk=i_0"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "eqSymm" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_13_in_VerifiedIdentityHashMap" (formula "18"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_15_in_VerifiedIdentityHashMap" (formula "19") (inst "i=i"))
            (rule "exLeft" (formula "19") (inst "sk=i_1"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "polySimp_mulComm0" (formula "21") (term "0,2,0"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "22"))
            (rule "concrete_or_1" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_17_in_VerifiedIdentityHashMap" (formula "22") (inst "i=i") (inst "j=j"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,2,0,1,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,2,0,0,1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,2,0,0,0,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "0,2,0,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,1,0"))
            (rule "commute_and" (formula "22") (term "0,0"))
            (rule "commute_and" (formula "22") (term "0,0,1,1,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_19_in_VerifiedIdentityHashMap" (formula "23") (inst "i=i") (inst "j=j"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,2,0,1,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,1,1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,2,0,0,1,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,2,0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,2,0,0,0,0,0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1,1,0"))
            (rule "commute_and" (formula "23") (term "0,0"))
            (rule "commute_and" (formula "23") (term "1,0,0,1,1,0"))
            (rule "commute_and" (formula "23") (term "0,0,0,1,1,0"))
            (rule "cnf_rightDist" (formula "23") (term "0,0,1,1,0"))
            (rule "commute_or" (formula "23") (term "0,0,0,1,1,0"))
            (rule "cnf_rightDist" (formula "23") (term "1,0,0,1,1,0"))
            (rule "commute_or" (formula "23") (term "1,1,0,0,1,1,0"))
            (rule "commute_or" (formula "23") (term "0,1,0,0,1,1,0"))
            (rule "cnf_rightDist" (formula "23") (term "0,0,0,1,1,0"))
            (rule "commute_or" (formula "23") (term "0,0,0,0,1,1,0"))
            (rule "commute_or" (formula "23") (term "1,0,0,0,1,1,0"))
            (rule "shift_paren_and" (formula "23") (term "0,0,1,1,0"))
            (rule "commute_and_2" (formula "23") (term "0,0,1,1,0"))
            (rule "commute_and_2" (formula "23") (term "0,0,0,1,1,0"))
            (rule "commute_and_2" (formula "23") (term "0,0,1,1,0"))
            (rule "commute_and" (formula "23") (term "0,0,0,0,1,1,0"))
            (rule "commute_and_2" (formula "23") (term "0,0,0,1,1,0"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_21_in_VerifiedIdentityHashMap" (formula "24"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_23_in_VerifiedIdentityHashMap" (formula "25"))
            (rule "andLeft" (formula "25"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_25_in_VerifiedIdentityHashMap" (formula "27"))
            (rule "insert_constant_value" (formula "27") (term "0,1,1,1"))
            (rule "andLeft" (formula "27"))
            (rule "translateJavaSubInt" (formula "28") (term "1,1"))
            (rule "eqSymm" (formula "28") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_27_in_VerifiedIdentityHashMap" (formula "29"))
            (rule "insert_constant_value" (formula "29") (term "0,1,1,0"))
            (rule "insert_constant_value" (formula "29") (term "1,1,0,1"))
            (rule "andLeft" (formula "29"))
            (rule "translateJavaDivInt" (formula "29") (term "1,0"))
            (rule "translateJavaMulInt" (formula "30") (term "1,0"))
            (rule "translateJavaSubInt" (formula "29") (term "1,1"))
            (rule "translateJavaDivInt" (formula "30") (term "1,1"))
            (rule "commute_or" (formula "29"))
            (rule "Partial_inv_axiom_for_JML_class_invariant_nr_29_in_VerifiedIdentityHashMap" (formula "31"))
            (rule "insert_constant_value" (formula "31") (term "0,1"))
            (rule "insert_constant_value" (formula "31") (term "0,1,0"))
            (rule "insert_constant_value" (formula "31") (term "0,1,0,0"))
            (rule "eqClose" (formula "31") (term "1,0,0"))
            (rule "concrete_and_3" (formula "31") (term "0,0"))
            (rule "equal_literals" (formula "31") (term "1"))
            (rule "concrete_and_4" (formula "31"))
            (rule "closeFalse" (formula "31"))
         )
      )
   )
   (branch "Case 2"
      (rule "equal_literals" (formula "8") (term "0,1"))
      (rule "concrete_not_2" (formula "8") (term "1"))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "Case 2"
   (rule "equal_literals" (formula "8") (term "0,1"))
   (rule "concrete_not_2" (formula "8") (term "1"))
   (rule "closeTrue" (formula "8"))
)
)
}
