\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Oct 14 16:01:19 CEST 2021
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , methodExpansion-methodExpansion\\:noRestriction , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\bootclasspath "../../../jre";

\javaSource "../../../src";

\include "../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Thu Oct 14 16:01:19 CEST 2021
name=Specs[Specs\\:\\:lemmaTwoNulls([Ljava.lang.Object)].JML normal_behavior operation contract.0
contract=Specs[Specs\\:\\:lemmaTwoNulls([Ljava.lang.Object)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proofScript "
  auto;

  # generate first witness
  rule 'bsum_num_of_gt0' 
       on='bsum{int i;}(0, l_0, \if (a[i * 2] = null)  \then (1)  \else (0))';
    # resolve implication by removing and proving the antecedent (bsum > 0)
    rule 'impLeft'; auto;

  rule 'exLeft';

  cut 
    'bsum{int i;}(0, l_0, \if (a[i * 2] = null)  \then (1)  \else (0)) - 1
   = bsum{int i;}(0, l_0, \if (a[i * 2] = null & i != i_0)  \then (1)  \else (0))';

  # Let's assume this equality first:
     # same for the second witness
     rule 'bsum_num_of_gt0' 
         on='bsum{int i;}(0, l_0, \if (a[i * 2] = null & i != i_0)  \then (1)  \else (0))';
       # resolve implication by removing and proving the antecedent (bsum > 0)
       rule 'impLeft'; auto;
     # with both witnesses we can close the proof
     auto;

  # Now: Show that the two bsums with different conditions are off by one. (choose second occurrence)
  rule 'bsum_split_in_three' on='bsum{int i;}(0, l_0, \if (a[i * 2] = null)  \then (1)  \else (0))'
       inst_i1='i_0' occ=1;
    auto; # precondition is automatic

  rule 'bsum_split_in_three' on='bsum{int i;}(0, l_0, \if (a[i * 2] = null & i != i_0)  \then (1)  \else (0))'
       inst_i1='i_0';
    auto; # precondition is automatic
  
  # now establish some equalities:
  cut 'bsum{int i;}(0, i_0, \if (a[i * 2] = null)  \then (1)  \else (0)) = 
       bsum{int i;}(0, i_0, \if (a[i * 2] = null & !i = i_0)  \then (1)  \else (0))';
    select number=1; auto;  # can be automatically established

  cut 'bsum{int uSub1;}(i_0 + 1, l_0, \if (a[uSub1 * 2] = null & !uSub1 = i_0)  \then (1)  \else (0)) =
       bsum{int uSub1;}(i_0 + 1, l_0, \if (a[uSub1 * 2] = null)  \then (1)  \else (0))';
    select number=1; rule 'equal_bsum5'; auto; auto;  # can be automatically established (splits once)

  # everything is set:
  auto;

"
