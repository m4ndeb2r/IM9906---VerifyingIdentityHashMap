\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Oct 14 18:05:52 CEST 2021
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , methodExpansion-methodExpansion\\:noRestriction , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\bootclasspath "../../../jre";

\javaSource "../../../src";

\include "../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Thu Oct 14 18:05:52 CEST 2021
name=Specs[Specs\\:\\:lemmaTwoNulls([Ljava.lang.Object)].JML normal_behavior operation contract.0
contract=Specs[Specs\\:\\:lemmaTwoNulls([Ljava.lang.Object)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "23239e9fef59a915e3708e167809bb10990a0c0c"))

(autoModeTime "1741")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "a,result,exc,heapAtPre,o,f") (proofscript))
(rule "translateJavaMod" (formula "1") (term "0,0,1,1,0"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,0,1,0,0,0,0,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "0,2,0,1,1,0,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,0,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "1,0,1,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_mulComm0" (formula "8") (term "0,2,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,2,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "jmod_axiom" (formula "4") (term "0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "4"))
(rule "polySimp_mulLiterals" (formula "4") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1"))
(rule "polySimp_rightDist" (formula "5") (term "1"))
(rule "mul_literals" (formula "5") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,0,0,0,0,0,1"))
(rule "newSym_eq" (formula "4") (inst "l=l_0") (inst "newSymDef=mul(length(a), Z(0(#)))"))
(rule "times_zero_1" (formula "4") (term "1,1"))
(rule "add_zero_right" (formula "4") (term "1"))
(rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
(rule "eqSymm" (formula "5"))
(rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
(rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "5"))
(rule "applyEq" (formula "7") (term "0") (ifseqformula "5"))
(rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(4(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,1,0"))
(rule "leq_literals" (formula "7") (term "0,0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
(rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
(rule "add_literals" (formula "7") (term "1,1,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0"))
(rule "leq_literals" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_lemmaTwoNulls,savedHeapBefore_lemmaTwoNulls"))
 (builtin "One Step Simplification" (formula "9"))
 (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_lemmaSumOfNums,exc_0") (contract "Specs[Specs::lemmaSumOfNums([Ljava.lang.Object)].JML normal_behavior operation contract.0"))
(branch "Post (lemmaSumOfNums)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaDivInt" (formula "8") (term "1,0,1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "polySimp_homoEq" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,2,0,0,2,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,2,0,0,0,2,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
   (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0"))
   (rule "ifthenelse_negated" (formula "9") (term "2,0,1,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0"))
   (rule "applyEq" (formula "9") (term "0,1,0,1,0") (ifseqformula "5"))
   (rule "applyEqRigid" (formula "9") (term "1,0,1,0") (ifseqformula "4"))
   (rule "applyEq" (formula "9") (term "0,1,0,1,0,0") (ifseqformula "5"))
   (rule "applyEq" (formula "9") (term "1,0,1,0,0") (ifseqformula "4"))
   (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "5"))
   (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "4"))
   (rule "polySimp_sepNegMonomial" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "methodCallReturn" (formula "11") (term "1"))
   (rule "assignment" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "methodCallEmpty" (formula "11") (term "1"))
   (rule "tryEmpty" (formula "11") (term "1"))
   (rule "emptyModality" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "applyEq" (formula "11") (term "0,1,1,1,0,0,0") (ifseqformula "5"))
   (rule "applyEqRigid" (formula "11") (term "1,1,1,0,0,0") (ifseqformula "4"))
   (rule "nnf_ex2all" (formula "11"))
   (rule "nnf_notEx" (formula "1") (term "0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "1,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
   (rule "commute_or_2" (formula "1") (term "0,0"))
   (rule "commute_or_2" (formula "1") (term "0,0,0"))
   (rule "commute_or" (formula "1") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "1") (term "0,0"))
   (rule "jdiv_axiom" (formula "5") (term "0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,0,2,1"))
   (rule "eqSymm" (formula "5"))
   (rule "applyEq" (formula "5") (term "1") (ifseqformula "6"))
   (rule "inEqSimp_subsumption6" (formula "5") (term "0,0") (ifseqformula "9"))
   (rule "mul_literals" (formula "5") (term "1,1,0,0,0"))
   (rule "greater_literals" (formula "5") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "leq_literals" (formula "5") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "polyDiv_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=l_0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,2,0"))
   (rule "equal_literals" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "polySimp_homoEq" (formula "5"))
   (rule "polySimp_pullOutFactor0" (formula "5") (term "0,0,0,1,0"))
   (rule "add_literals" (formula "5") (term "1,0,0,0,1,0"))
   (rule "times_zero_1" (formula "5") (term "0,0,0,1,0"))
   (rule "div_literals" (formula "5") (term "0,0,1,0"))
   (rule "add_zero_left" (formula "5") (term "0,1,0"))
   (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
   (rule "add_literals" (formula "5") (term "1,0"))
   (rule "times_zero_1" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "jdiv_axiom" (formula "7") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0,0,2,1"))
   (rule "eqSymm" (formula "7"))
   (rule "inEqSimp_subsumption6" (formula "7") (term "0,0") (ifseqformula "9"))
   (rule "greater_literals" (formula "7") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0"))
   (rule "leq_literals" (formula "7") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "eqSymm" (formula "7"))
   (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "7"))
   (rule "polyDiv_pullOut" (formula "8") (term "1,1") (inst "polyDivCoeff=l_0"))
   (rule "equal_literals" (formula "8") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,1,1"))
   (rule "polySimp_pullOutFactor0" (formula "8") (term "0,0,1,1"))
   (rule "add_literals" (formula "8") (term "1,0,0,1,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "polyDiv_pullOut" (formula "7") (term "1") (inst "polyDivCoeff=l_0"))
   (rule "equal_literals" (formula "7") (term "0,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,1"))
   (rule "polySimp_pullOutFactor0" (formula "7") (term "0,0,1"))
   (rule "add_literals" (formula "7") (term "1,0,0,1"))
   (rule "polySimp_addComm0" (formula "7") (term "1"))
   (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
   (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "10"))
   (rule "greater_literals" (formula "6") (term "0,0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1,0"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "div_axiom" (formula "8") (term "1,1") (inst "quotient=quotient_0"))
   (rule "mul_literals" (formula "8") (term "1,1,1,1,1"))
   (rule "equal_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "qeq_literals" (formula "8") (term "0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "polySimp_addComm1" (formula "10") (term "1"))
   (rule "add_literals" (formula "10") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_homoInEq1" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
   (rule "polySimp_addComm1" (formula "10") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,0"))
   (rule "applyEqRigid" (formula "11") (term "1,1") (ifseqformula "8"))
   (rule "polySimp_addComm1" (formula "11") (term "1"))
   (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "8"))
   (rule "polySimp_addComm0" (formula "7") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "polySimp_elimOne" (formula "10") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1"))
   (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "9"))
   (rule "mul_literals" (formula "12") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0"))
   (rule "elimGcdLeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(2(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(3(#))"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0"))
   (rule "neg_literal" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "12") (term "0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
   (rule "add_literals" (formula "12") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0"))
   (rule "qeq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
    (builtin "Evaluate Query" (formula "11") (term "0") (newnames "a_0,callee,queryResult,res_countEven"))
   (rule "replaceKnownQuery0_0" (formula "12") (term "0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "16") (term "0,0,1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "queryResult"))
    (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_countEven,result_0,exc_1") (contract "Specs[Specs::countEven([Ljava.lang.Object)].JML normal_behavior operation contract.0"))
   (branch "Post (countEven)"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "eqSymm" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "0,2,0,0,0,2,0"))
      (rule "ifthenelse_negated" (formula "17") (term "2,0"))
      (rule "assignment" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "applyEq" (formula "17") (term "0,1,0") (ifseqformula "6"))
      (rule "applyEqRigid" (formula "17") (term "1,0") (ifseqformula "5"))
      (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "17"))
      (rule "methodCallEmpty" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "emptyModality" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "notRight" (formula "18"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "18") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "16") (term "0,1,1") (ifseqformula "1"))
      (rule "bsum_num_of_gt0" (formula "16") (term "0") (proofscript))
      (rule "impLeft" (formula "16") (proofscript))
      (branch
         (rule "inEqSimp_gtRight" (formula "19") (proofscript))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "17"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "13"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
         (rule "qeq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "closeFalse" (formula "15"))
      )
      (branch "Case 2"
         (rule "exLeft" (formula "16") (inst "sk=i_0") (proofscript))
         (rule "cut" (inst "cutFormula=  sub(bsum{int i;}(Z(0(#)),
                   l_0,
                   \\if (  java.lang.Object::select(heap,
                                                   a,
                                                   arr(mul(i,
                                                           Z(2(#)))))
                        = null)
                       \\then (Z(1(#)))
                       \\else (Z(0(#)))),
      Z(1(#)))
= bsum{int i;}(Z(0(#)),
               l_0,
               \\if (    java.lang.Object::select(heap,
                                                 a,
                                                 arr(mul(i,
                                                         Z(2(#)))))
                      = null
                    & !i = i_0)
                   \\then (Z(1(#)))
                   \\else (Z(0(#))))") (proofscript))
         (branch "CUT: bsum{int i;}(0, l_0, if (a[i * 2] = null) then (1) else (0)) - 1 = bsum{int i;}(0, l_0, if (a[i * 2] = null & !i = i_0) then (1) else (0)) TRUE"
            (rule "bsum_num_of_gt0" (formula "1") (term "1") (proofscript))
            (rule "impLeft" (formula "1") (proofscript))
            (branch
               (rule "andLeft" (formula "17") (proofscript))
               (rule "andLeft" (formula "17"))
               (rule "eqSymm" (formula "1"))
               (rule "polySimp_elimSub" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1"))
               (rule "inEqSimp_gtRight" (formula "23"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "21"))
               (rule "polySimp_addAssoc" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1"))
               (rule "polySimp_rightDist" (formula "19") (term "1"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
               (rule "mul_literals" (formula "19") (term "0,1"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "14"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "1"))
               (rule "qeq_literals" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "closeFalse" (formula "16"))
            )
            (branch
               (rule "andLeft" (formula "18") (proofscript))
               (rule "andLeft" (formula "18"))
               (rule "exLeft" (formula "1") (inst "sk=i_1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "4"))
               (rule "eqSymm" (formula "4"))
               (rule "polySimp_elimSub" (formula "4") (term "1"))
               (rule "mul_literals" (formula "4") (term "1,1"))
               (rule "polySimp_addComm0" (formula "4") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "23"))
               (rule "polySimp_addAssoc" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1"))
               (rule "polySimp_rightDist" (formula "21") (term "1"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
               (rule "mul_literals" (formula "21") (term "0,1"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "21"))
               (rule "times_zero_1" (formula "20") (term "0,0"))
               (rule "add_zero_left" (formula "20") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20"))
               (rule "mul_literals" (formula "20") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "18"))
               (rule "leq_literals" (formula "20") (term "0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "19"))
               (rule "leq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "6") (inst "t=i_1"))
               (rule "replace_known_left" (formula "6") (term "0,1,0,0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0"))
               (rule "inEqSimp_contradInEq0" (formula "6") (term "1,0,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "leq_literals" (formula "6") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "allLeft" (formula "7") (inst "t=i_0"))
               (rule "replace_known_left" (formula "7") (term "0,1,0,0,0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0"))
               (rule "inEqSimp_contradInEq0" (formula "7") (term "1,0,0") (ifseqformula "23"))
               (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
               (rule "leq_literals" (formula "7") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "allLeft" (formula "6") (inst "t=i_0"))
               (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "23"))
               (rule "qeq_literals" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "29"))
               (rule "inEqSimp_contradEq3" (formula "29") (ifseqformula "6"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
               (rule "add_literals" (formula "29") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "29") (term "1,0,0"))
               (rule "add_zero_right" (formula "29") (term "0,0"))
               (rule "qeq_literals" (formula "29") (term "0"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "false_right" (formula "29"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "1"))
               (rule "leq_literals" (formula "24") (term "0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "24"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "23"))
               (rule "leq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "9") (inst "t=i_1"))
               (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq0" (formula "9") (term "1") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
               (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
               (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "9") (term "0,0,1"))
               (rule "leq_literals" (formula "9") (term "0,1"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "2"))
               (rule "qeq_literals" (formula "9") (term "0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "closeFalse" (formula "9"))
            )
         )
         (branch "CUT: bsum{int i;}(0, l_0, if (a[i * 2] = null) then (1) else (0)) - 1 = bsum{int i;}(0, l_0, if (a[i * 2] = null & !i = i_0) then (1) else (0)) FALSE"
            (rule "bsum_split_in_three" (formula "20") (term "0,0") (inst "i1=i_0") (inst "uSub1=uSub1") (proofscript))
            (branch "Precondition"
               (rule "andLeft" (formula "16") (proofscript))
               (rule "close" (formula "21") (ifseqformula "16"))
            )
            (branch "Splitted Sum"
               (rule "bsum_split_in_three" (formula "20") (term "1") (inst "i1=i_0") (inst "uSub1=uSub1") (proofscript))
               (branch "Precondition"
                  (rule "andLeft" (formula "16") (proofscript))
                  (rule "close" (formula "21") (ifseqformula "16"))
               )
               (branch "Splitted Sum"
                  (rule "cut" (inst "cutFormula=  bsum{int i;}(Z(0(#)),
               i_0,
               \\if (  java.lang.Object::select(heap,
                                               a,
                                               arr(mul(i,
                                                       Z(2(#)))))
                    = null)
                   \\then (Z(1(#)))
                   \\else (Z(0(#))))
= bsum{int i;}(Z(0(#)),
               i_0,
               \\if (    java.lang.Object::select(heap,
                                                 a,
                                                 arr(mul(i,
                                                         Z(2(#)))))
                      = null
                    & !i = i_0)
                   \\then (Z(1(#)))
                   \\else (Z(0(#))))") (proofscript))
                  (branch "CUT: bsum{int i;}(0, i_0, if (a[i * 2] = null) then (1) else (0)) = bsum{int i;}(0, i_0, if (a[i * 2] = null & !i = i_0) then (1) else (0)) TRUE"
                     (rule "cut" (inst "cutFormula=  bsum{int uSub1;}(add(i_0, Z(1(#))),
                   l_0,
                   \\if (    java.lang.Object::select(heap,
                                                     a,
                                                     arr(mul(uSub1,
                                                             Z(2(#)))))
                          = null
                        & !uSub1 = i_0)
                       \\then (Z(1(#)))
                       \\else (Z(0(#))))
= bsum{int uSub1;}(add(i_0, Z(1(#))),
                   l_0,
                   \\if (  java.lang.Object::select(heap,
                                                   a,
                                                   arr(mul(uSub1,
                                                           Z(2(#)))))
                        = null)
                       \\then (Z(1(#)))
                       \\else (Z(0(#))))") (proofscript))
                     (branch "CUT: bsum{int uSub1;}(i_0 + 1, l_0, if ( a[uSub1 * 2] = null & !uSub1 = i_0) then (1) else (0)) = bsum{int uSub1;}(i_0 + 1, l_0, if (a[uSub1 * 2] = null) then (1) else (0)) TRUE"
                         (builtin "One Step Simplification" (formula "22") (proofscript))
                        (rule "add_zero_right" (formula "22") (term "0,1"))
                        (rule "andLeft" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "eqSymm" (formula "2"))
                        (rule "replace_known_left" (formula "24") (term "0,1,0,0,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "polySimp_homoEq" (formula "24"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,1,0"))
                        (rule "mul_literals" (formula "24") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,1,0,1,1,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,1,1,0"))
                        (rule "add_literals" (formula "24") (term "0,0,1,1,0"))
                        (rule "add_zero_left" (formula "24") (term "0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0"))
                        (rule "bsum_induction_lower2_concrete" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                        (rule "polySimp_elimSub" (formula "1") (term "0"))
                        (rule "mul_literals" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,0"))
                        (rule "bsum_induction_lower2_concrete" (formula "24") (term "1,0"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "19")) (ifInst ""  (formula "20")))
                        (rule "polySimp_elimSub" (formula "24") (term "1,0"))
                        (rule "times_zero_2" (formula "24") (term "1,1,0"))
                        (rule "add_zero_right" (formula "24") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                        (rule "bsum_induction_lower2_concrete" (formula "1") (term "1"))
                        (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "polySimp_elimSub" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1"))
                        (rule "bsum_induction_lower2_concrete" (formula "24") (term "0,1,0,0"))
                        (rule "replace_known_left" (formula "24") (term "0,1,1,0,1,0,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "polySimp_elimSub" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,0,0"))
                        (rule "polySimp_mulAssoc" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "24") (term "0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,1"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0,1") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "replace_known_left" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "1"))
                        (rule "polySimp_addAssoc" (formula "24") (term "0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "24") (term "0"))
                        (rule "add_literals" (formula "24") (term "1,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0"))
                        (rule "add_zero_right" (formula "24") (term "0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0"))
                        (rule "polySimp_addComm1" (formula "24") (term "0,0"))
                        (rule "add_literals" (formula "24") (term "0,0,0"))
                        (rule "add_zero_left" (formula "24") (term "0,0"))
                        (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "2"))
                        (rule "polySimp_pullOutFactor2" (formula "24") (term "0"))
                        (rule "add_literals" (formula "24") (term "1,0"))
                        (rule "times_zero_1" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "closeTrue" (formula "24"))
                     )
                     (branch "CUT: bsum{int uSub1;}(i_0 + 1, l_0, if ( a[uSub1 * 2] = null & !uSub1 = i_0) then (1) else (0)) = bsum{int uSub1;}(i_0 + 1, l_0, if (a[uSub1 * 2] = null) then (1) else (0)) FALSE"
                        (rule "equal_bsum5" (formula "21") (proofscript))
                        (branch "Equal length"
                            (builtin "One Step Simplification" (formula "23") (proofscript))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                        (branch "Equal elements"
                            (builtin "One Step Simplification" (formula "23") (proofscript))
                           (rule "add_zero_right" (formula "23") (term "0,1"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "allRight" (formula "23") (inst "sk=uSub1_0"))
                           (rule "impRight" (formula "23"))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "eqSymm" (formula "25"))
                           (rule "replace_known_left" (formula "27") (term "0,1,0,0,0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "polySimp_elimSub" (formula "25") (term "0,0,2,0,0,0"))
                           (rule "polySimp_homoEq" (formula "27"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,2,0,0,0"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,2,0,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,2,0,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,2,0,0,0"))
                           (rule "eqSymm" (formula "25"))
                           (rule "polySimp_elimSub" (formula "27") (term "0,1,0"))
                           (rule "mul_literals" (formula "27") (term "1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "27") (term "1,1,0"))
                           (rule "polySimp_addLiterals" (formula "27") (term "0,1,1,0"))
                           (rule "add_zero_right" (formula "27") (term "0,1,1,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "27") (term "0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,0,0"))
                           (rule "bsum_induction_lower2_concrete" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                           (rule "polySimp_elimSub" (formula "26") (term "0"))
                           (rule "times_zero_2" (formula "26") (term "1,0"))
                           (rule "add_zero_right" (formula "26") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "bsum_induction_lower2_concrete" (formula "27") (term "1,0"))
                            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "21")))
                           (rule "polySimp_elimSub" (formula "27") (term "1,0"))
                           (rule "times_zero_2" (formula "27") (term "1,1,0"))
                           (rule "add_zero_right" (formula "27") (term "1,0"))
                           (rule "bsum_induction_lower2_concrete" (formula "26") (term "1"))
                           (rule "replace_known_left" (formula "26") (term "0,1,1,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "polySimp_elimSub" (formula "26") (term "1"))
                           (rule "polySimp_addComm0" (formula "26") (term "1"))
                           (rule "bsum_induction_lower2_concrete" (formula "27") (term "0,1,0,0"))
                           (rule "replace_known_left" (formula "27") (term "0,1,1,0,1,0,0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "polySimp_elimSub" (formula "27") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
                           (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "27") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,1"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "mul_literals" (formula "26") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "applyEq" (formula "27") (term "1,0,0,0") (ifseqformula "3"))
                           (rule "polySimp_pullOutFactor2b" (formula "27") (term "0,0,0"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                           (rule "mul_literals" (formula "27") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1"))
                           (rule "mul_literals" (formula "20") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "25") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0"))
                           (rule "leq_literals" (formula "25") (term "0,0,1,0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "closeTrue" (formula "25"))
                        )
                     )
                  )
                  (branch "CUT: bsum{int i;}(0, i_0, if (a[i * 2] = null) then (1) else (0)) = bsum{int i;}(0, i_0, if (a[i * 2] = null & !i = i_0) then (1) else (0)) FALSE"
                      (builtin "One Step Simplification" (formula "21") (proofscript))
                     (rule "add_zero_right" (formula "21") (term "0,1"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_left" (formula "23") (term "0,1,0,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "polySimp_elimSub" (formula "23") (term "0"))
                     (rule "mul_literals" (formula "23") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "23"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "23") (term "1,1,0"))
                     (rule "polySimp_addLiterals" (formula "23") (term "0,1,1,0"))
                     (rule "add_zero_right" (formula "23") (term "0,1,1,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "23") (term "0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,0,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "23") (term "1,0"))
                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
                     (rule "polySimp_elimSub" (formula "23") (term "1,0"))
                     (rule "times_zero_2" (formula "23") (term "1,1,0"))
                     (rule "add_zero_right" (formula "23") (term "1,0"))
                     (rule "bsum_induction_lower2_concrete" (formula "23") (term "0,1,0,0"))
                     (rule "replace_known_left" (formula "23") (term "0,1,0,1,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "18")))
                     (rule "polySimp_elimSub" (formula "23") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "23") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "polySimp_sepPosMonomial" (formula "23"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1"))
                     (rule "polySimp_rightDist" (formula "23") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "0,1"))
                     (rule "polySimp_rightDist" (formula "23") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "23") (term "0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                     (rule "mul_literals" (formula "17") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "17"))
                     (rule "times_zero_1" (formula "16") (term "0,0"))
                     (rule "add_zero_left" (formula "16") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "mul_literals" (formula "16") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "14"))
                     (rule "leq_literals" (formula "16") (term "0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "bsum_equal_split3" (formula "22"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "bsum_lower_equals_upper" (formula "22") (term "1,2,1"))
                     (rule "bsum_lower_equals_upper" (formula "22") (term "0,1,1"))
                     (rule "less_literals" (formula "22") (term "0,1"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "polySimp_elimSub" (formula "22") (term "2,0,1"))
                     (rule "polySimp_addComm0" (formula "22") (term "2,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                     (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "equal_bsum1" (formula "23"))
                     (rule "allRight" (formula "23") (inst "sk=i_1"))
                     (rule "impRight" (formula "23"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_contradEq3" (formula "25") (term "0,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "closeTrue" (formula "25"))
                  )
               )
            )
         )
      )
   )
   (branch "Exceptional Post (countEven)"
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "16"))
      (rule "close" (formula "19") (ifseqformula "18"))
   )
   (branch "Pre (countEven)"
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")) (ifInst ""  (formula "2")) (ifInst ""  (formula "17")) (ifInst ""  (formula "3")))
      (rule "translateJavaMod" (formula "16") (term "0"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "6"))
      (rule "jmod_axiom" (formula "16") (term "0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
      (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "5"))
      (rule "polySimp_pullOutFactor0" (formula "16") (term "0"))
      (rule "add_literals" (formula "16") (term "1,0"))
      (rule "times_zero_1" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "closeTrue" (formula "16"))
   )
)
(branch "Exceptional Post (lemmaSumOfNums)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaDivInt" (formula "8") (term "1,0,1"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (lemmaSumOfNums)"
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "2")))
   (rule "translateJavaMod" (formula "9") (term "0"))
   (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "5"))
   (rule "jmod_axiom" (formula "9") (term "0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
   (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "4"))
   (rule "polySimp_pullOutFactor0" (formula "9") (term "0"))
   (rule "add_literals" (formula "9") (term "1,0"))
   (rule "times_zero_1" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "closeTrue" (formula "9"))
)
)
}
