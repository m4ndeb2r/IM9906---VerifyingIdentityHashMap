\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Oct 14 17:59:44 CEST 2021
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , methodExpansion-methodExpansion\\:noRestriction , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:on , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\bootclasspath "../../../jre";

\javaSource "../../../src";

\include "../../../functions.key";

\proofObligation "#Proof Obligation Settings
#Thu Oct 14 17:59:44 CEST 2021
name=Specs[Specs\\:\\:lemmaSumOfNums([Ljava.lang.Object)].JML normal_behavior operation contract.0
contract=Specs[Specs\\:\\:lemmaSumOfNums([Ljava.lang.Object)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "23239e9fef59a915e3708e167809bb10990a0c0c"))

(autoModeTime "662")

(branch "dummy ID"
(rule "translateJavaMod" (formula "1") (term "0,1,1,0") (newnames "a,exc,heapAtPre,o,f"))
(rule "translateJavaDivInt" (formula "1") (term "1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "6") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_homoEq" (formula "6") (term "0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "0,2,0,0,0,2,0,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "0,2,0,0,2,1,0,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,1"))
(rule "ifthenelse_negated" (formula "6") (term "2,0,1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,1"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "jmod_axiom" (formula "4") (term "0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "6") (term "0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "4"))
(rule "polySimp_mulLiterals" (formula "4") (term "0"))
(rule "newSym_eq" (formula "4") (inst "l=l_0") (inst "newSymDef=mul(length(a), Z(0(#)))"))
(rule "times_zero_1" (formula "4") (term "1,1"))
(rule "add_zero_right" (formula "4") (term "1"))
(rule "applyEq" (formula "5") (term "0,0") (ifseqformula "4"))
(rule "eqSymm" (formula "5"))
(rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_lemmaSumOfNums,savedHeapBefore_lemmaSumOfNums,_aBefore_lemmaSumOfNums"))
 (builtin "One Step Simplification" (formula "7"))
(rule "for_to_while" (formula "7") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "k"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "jdiv_axiom" (formula "4") (term "0"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,1"))
(rule "eqSymm" (formula "4"))
(rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
(rule "elimGcdGeq" (formula "4") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0,0,0"))
(rule "sub_literals" (formula "4") (term "0,0,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "4") (term "0,0,0,1,0,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "4") (term "0,0,1,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0,0,0,0"))
(rule "add_literals" (formula "4") (term "1,1,0,0,0,0,0"))
(rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
(rule "qeq_literals" (formula "4") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,0,0"))
(rule "add_literals" (formula "4") (term "1,0,0,0,0"))
(rule "times_zero_1" (formula "4") (term "0,0,0,0"))
(rule "leq_literals" (formula "4") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polyDiv_pullOut" (formula "4") (term "0,2,0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,0,2,0"))
(rule "equal_literals" (formula "4") (term "0,0,2,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,2,0"))
(rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,0,2,0"))
(rule "add_literals" (formula "4") (term "1,0,0,0,2,0"))
(rule "times_zero_1" (formula "4") (term "0,0,0,2,0"))
(rule "div_literals" (formula "4") (term "0,0,2,0"))
(rule "add_zero_left" (formula "4") (term "0,2,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "2,0"))
(rule "polySimp_elimOne" (formula "4") (term "2,0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polyDiv_pullOut" (formula "4") (term "0,1") (inst "polyDivCoeff=l_0"))
(rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,0,1"))
(rule "equal_literals" (formula "4") (term "0,0,1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_homoEq" (formula "4") (term "1"))
(rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,0,1,0,1"))
(rule "add_literals" (formula "4") (term "1,0,0,0,1,0,1"))
(rule "times_zero_1" (formula "4") (term "0,0,0,1,0,1"))
(rule "div_literals" (formula "4") (term "0,0,1,0,1"))
(rule "add_zero_left" (formula "4") (term "0,1,0,1"))
(rule "polySimp_pullOutFactor1" (formula "4") (term "0,1"))
(rule "add_literals" (formula "4") (term "1,0,1"))
(rule "times_zero_1" (formula "4") (term "0,1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
 (builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,kBefore_LOOP,k_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
   (rule "bsum_lower_equals_upper" (formula "7") (term "1,0,1"))
   (rule "bsum_lower_equals_upper" (formula "7") (term "0,0,1"))
   (rule "translateJavaDivInt" (formula "7") (term "1,1,0"))
   (rule "leq_literals" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "add_zero_left" (formula "7") (term "0,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_leqRight" (formula "7"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "6"))
   (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "5"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
   (rule "inEqSimp_contradInEq3" (formula "6") (ifseqformula "1"))
   (rule "greater_literals" (formula "6") (term "0,0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "mul_literals" (formula "6") (term "0,0"))
   (rule "qeq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "closeFalse" (formula "6"))
)
(branch "Body Preserves Invariant"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaDivInt" (formula "7") (term "1,1,0"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "9") (term "1,1,0,0,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1"))
   (rule "translateJavaDivInt" (formula "9") (term "0,0,1,1,1,0,1,1"))
   (rule "translateJavaDivInt" (formula "9") (term "0,0,1,1,1,0,1"))
   (rule "andLeft" (formula "7"))
   (rule "impRight" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "eqSymm" (formula "12") (term "0,0,1,0,1,1,0,1"))
   (rule "polySimp_homoEq" (formula "10"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0,1"))
   (rule "polySimp_homoEq" (formula "12") (term "1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,2,0,0,0,2,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,2,0,0,2,1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,2,0,0,0,2,0,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,2,0,0,2,1,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "1,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "10") (term "0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,1,0,1"))
   (rule "ifthenelse_negated" (formula "10") (term "2,0,1,0"))
   (rule "polySimp_addComm1" (formula "10") (term "0"))
   (rule "ifthenelse_negated" (formula "12") (term "2,0,1,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "thrownExc"))
   (rule "applyEq" (formula "12") (term "0,1,0,1,1,1,0,0") (ifseqformula "6"))
   (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "6"))
   (rule "applyEq" (formula "12") (term "1,0,1,1,1,0,0") (ifseqformula "5"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,0"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "5"))
   (rule "inEqSimp_commuteGeq" (formula "9"))
   (rule "blockThrow" (formula "12") (term "1,0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "10"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
   (rule "polySimp_elimOne" (formula "10") (term "0"))
   (rule "polySimp_sepNegMonomial" (formula "12") (term "1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
   (rule "times_zero_1" (formula "8") (term "0,0"))
   (rule "add_zero_left" (formula "8") (term "0"))
   (rule "boxToDiamond" (formula "1") (term "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
   (rule "assignment" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
   (rule "compound_division_1" (formula "11") (term "1") (inst "#v=x_2"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
   (rule "assignment_read_length" (formula "11") (term "1"))
   (branch "Normal Execution (_a != null)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
      (rule "false_right" (formula "11"))
      (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "5"))
      (rule "assignmentDivisionInt" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaDivInt" (formula "11") (term "0,1,0,1"))
      (rule "equal_literals" (formula "11") (term "0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "4"))
      (rule "less_than_comparison_simple" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
      (rule "add_literals" (formula "10") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0"))
      (rule "qeq_literals" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
      (rule "times_zero_1" (formula "9") (term "0,0"))
      (rule "add_zero_left" (formula "9") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "arrayLengthNotNegative" (formula "6") (term "0"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
      (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "9"))
      (rule "mul_literals" (formula "6") (term "1,1,0"))
      (rule "greater_literals" (formula "6") (term "0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
      (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_5") (inst "#v0=x_4"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
      (rule "assignment" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_5"))
      (rule "compound_division_1" (formula "12") (term "1") (inst "#v=x_6"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_6"))
      (rule "assignment_read_length" (formula "12") (term "1"))
      (branch "Normal Execution (_a != null)"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
         (rule "false_right" (formula "12"))
         (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "6"))
         (rule "assignmentDivisionInt" (formula "12") (term "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "translateJavaDivInt" (formula "12") (term "0,1,0,1"))
         (rule "equal_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "5"))
         (rule "less_than_comparison_simple" (formula "12") (term "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
         (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "ifSplit" (formula "12"))
         (branch "if x_3 true"
             (builtin "One Step Simplification" (formula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "postincrement" (formula "12") (term "1"))
            (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_7"))
            (rule "remove_parentheses_right" (formula "12") (term "1"))
            (rule "assignmentAdditionInt" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "12") (term "1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "tryEmpty" (formula "12") (term "1"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "emptyModality" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1"))
            (rule "polySimp_rightDist" (formula "12") (term "0,0,1"))
            (rule "mul_literals" (formula "12") (term "0,0,0,1"))
            (rule "bsum_induction_upper_concrete" (formula "12") (term "0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "1,1,0"))
            (rule "bsum_induction_upper_concrete" (formula "12") (term "0,1,0"))
            (rule "polySimp_homoEq" (formula "12") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,1,0"))
            (rule "precOfInt" (formula "12") (term "1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,1"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,1"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,1,1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,1"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,0,0,1,0"))
            (rule "replace_known_left" (formula "12") (term "0,0,1,0,0,0,1,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,0,0,1,0"))
            (rule "replace_known_left" (formula "12") (term "0,0,1,0,0,0,1,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1"))
            (rule "times_zero_2" (formula "12") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,1"))
            (rule "applyEq" (formula "12") (term "0,1,0,1,0") (ifseqformula "10"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0"))
            (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,1,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1,0"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,1") (ifseqformula "6"))
            (rule "applyEq" (formula "12") (term "0,1,0,1,1") (ifseqformula "6"))
            (rule "applyEq" (formula "12") (term "0,0,1,0,0") (ifseqformula "6"))
            (rule "applyEqRigid" (formula "12") (term "1,0,0,1") (ifseqformula "5"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1"))
            (rule "applyEq" (formula "12") (term "1,0,1,1") (ifseqformula "5"))
            (rule "polySimp_pullOutFactor2" (formula "12") (term "0,1,1"))
            (rule "add_literals" (formula "12") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "12") (term "0,1,1"))
            (rule "leq_literals" (formula "12") (term "1,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "applyEqRigid" (formula "12") (term "0,1,0,0") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "12") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
            (rule "polySimp_elimOne" (formula "12") (term "0,1"))
            (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0"))
            (rule "replace_known_left" (formula "12") (term "1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "9"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "ifthenelse_split" (formula "12") (term "0"))
            (branch "a[k_0 * 2] = null TRUE"
               (rule "replace_known_left" (formula "13") (term "0,0,1,1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "times_zero_2" (formula "13") (term "1,1"))
               (rule "add_zero_right" (formula "13") (term "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "closeTrue" (formula "13"))
            )
            (branch "a[k_0 * 2] = null FALSE"
               (rule "replace_known_right" (formula "13") (term "0,0,1,1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1,1"))
               (rule "add_literals" (formula "13") (term "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "closeTrue" (formula "13"))
            )
         )
         (branch "if x_3 false"
             (builtin "One Step Simplification" (formula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (_a = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_a = null)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaDivInt" (formula "7") (term "1,1,0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "polySimp_homoEq" (formula "9"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,2,0,0,2,1,1,1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,2,0,0,0,2,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0"))
   (rule "ifthenelse_negated" (formula "9") (term "2,0,1,0"))
   (rule "polySimp_addComm1" (formula "9") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
   (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "5"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
   (rule "inEqSimp_commuteGeq" (formula "8"))
   (rule "polySimp_sepNegMonomial" (formula "9"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
   (rule "polySimp_elimOne" (formula "9") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
   (rule "times_zero_1" (formula "7") (term "0,0"))
   (rule "add_zero_left" (formula "7") (term "0"))
   (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
   (rule "assignment" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
   (rule "compound_division_1" (formula "12") (term "1") (inst "#v=x_2"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
   (rule "assignment_read_length" (formula "12") (term "1"))
   (branch "Normal Execution (_a != null)"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
      (rule "false_right" (formula "12"))
      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "5"))
      (rule "assignmentDivisionInt" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "translateJavaDivInt" (formula "12") (term "0,1,0,1"))
      (rule "equal_literals" (formula "12") (term "0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "4"))
      (rule "less_than_comparison_simple" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "emptyModality" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "impRight" (formula "12"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "10"))
      (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "11"))
      (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,0"))
      (rule "times_zero_1" (formula "11") (term "0"))
      (rule "qeq_literals" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,0"))
      (rule "times_zero_1" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "9") (term "1,0,1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "1"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "tryEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "5"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "9"))
      (rule "polySimp_homoEq" (formula "11"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
      (rule "applyEq" (formula "11") (term "0,1,0,1,0") (ifseqformula "6"))
      (rule "applyEqRigid" (formula "11") (term "1,0,1,0") (ifseqformula "5"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0"))
      (rule "add_zero_right" (formula "11") (term "0"))
      (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "5"))
      (rule "polySimp_pullOutFactor2" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,0"))
      (rule "times_zero_1" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "closeTrue" (formula "11"))
   )
   (branch "Null Reference (_a = null)"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
